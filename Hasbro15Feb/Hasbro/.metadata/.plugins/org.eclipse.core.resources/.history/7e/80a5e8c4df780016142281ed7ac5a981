package com.hasbro.security;
/**
 * @author Anjali Gupta
 *
 */
import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.Rectangle;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestNGMethod;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.SkipException;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import base.SeleniumDriver;
import util.CommonFunctions;
import util.CommonProjectFunctions;
import util.ErrorUtil;
import util.Utility;

import org.openqa.selenium.TakesScreenshot;


public class Specifications extends TestsuiteBase{

	String runmodes[]=null;
	static int count=-1;
	static boolean skip=false;
	static boolean fail=false;
	static boolean isTestPass=true;
	static WebDriverWait wait=null;
	static String strPrimary ;
	Date date = new Date();
	String imgPath= "C:\\SeleniumScreen\\INC0290848_"+date.getTime();
	boolean failure = false;

	public static By specificationsTablink= By.xpath("//a[contains(text(),'Specifications')]");
	public static By addNewSpecification= By.xpath("//td[contains(text(),'Add New Specification')]");
	public static By createNewSpecification= By.xpath("//a[text()='Create New Specification']");
	public static By headingcreateNewSpecification= By.xpath("//td[contains(text(),'Create New Specification')]");
	public static By wave= By.xpath("//td[contains(text(),'Wave')]//following::select[1]");
	public static By remarks= By.xpath("//td[contains(text(),'Remarks')]//following::td[1]/textarea");
	public static By sourcesCheckAll= By.xpath("//div[@id='souces']//a[text()='Check All']");
	public static By sourcesFirstCheckbox= By.xpath("//input[@name='sourceIds'][1]");
	public static By specificationDetailsLebel= By.xpath("//div[contains(@id,'minus')]/a[text()='Details']");
	public static By specificationAction= By.xpath("//table[@class='PAGEHEADINGTITLE_BG']//select");
	public static By noSpecificationHeadig= By.xpath("//td[@class='HEADING1']");
	public static By RO_specificationChangeHistory= By.id("hbSpecificationChangeHistory");
	public static By RO_Primary= By.xpath("//div[contains(@id,'plus')]/span");
	public static By deleteSpec= By.xpath("//table[@class='PAGEHEADINGTITLE_BG']//select/option[contains(text(),'Delete Spec')]");
	public static By textAfertDelete= By.xpath("//div[contains(@class,'HEADING1')]/text()[preceding-sibling::br and following-sibling::br]");
	public static By plusSign=By.xpath("//div[contains(@id,'specTitle')]/a"); //div[contains(@id,'plus')]/a/img
	public static By Specificationtitle=By.xpath("//table[@class='PAGEHEADINGTITLE_BG']/tbody/tr/td[1]/div[1]/a/following-sibling::text()[1]");
	public static By specificationC= By.xpath("//table[@class='PAGEHEADINGTITLE_BG']");




	int y=0;
	String loginVal;
	Boolean flaglogin=false;
	static String valULCS;
	static String valULCSAfterChange;


	@Test(dataProvider="testDataTest")
	//public void tcProduct(String login, String pwd, String AttributeGroup, String Verification,String Create, String SetState, String ReadView, String UpdateProduct,String UpdateProductSeason, String Delete,String SeasonYear,String LSAction,String LSViews) throws Exception{
	public void tcSpecifications(String[] data) throws Exception{
		try{
			count++;
			System.out.println(runmodes[count]);
			if(!runmodes[count].equalsIgnoreCase("y")){
				skip=true;
				log.debug(this.getClass().getSimpleName()+" Testdata row number "+(count+1)+" is skippped as runmode is set to N");
				throw new SkipException(this.getClass().getSimpleName()+" Testdata row number "+(count+1)+" is skipped as runmode is set to N");
			}
			log.debug("Inside testcase for Security Product");
			//	log.debug(login+"--"+pwd+"--"+AttributeGroup+"--"+Verification+"--"+Create+"--"+SetState+"--"+ReadView+"--"+UpdateProduct+"--"+UpdateProductSeason+"--"+Delete);
			System.out.println("col0 :" + data[0]);
			System.out.println("col1 :" + data[1]);
			System.out.println("col4 :" + data[4]);
			//	driver.manage().timeouts().pageLoadTimeout(myAutomationWait, TimeUnit.SECONDS);
			if(flaglogin==true)
			{
				if(!loginVal.equalsIgnoreCase(data[0])){
					y=0;
					flaglogin=false;
					CommonProjectFunctions.logOut();
					driver.quit();
				}
			}
			if(runmodes[count].equalsIgnoreCase("y")){
				if(y==0){
					openBrowser();
					launchApp(data[0],data[1]);
					y++;
					System.out.println("y: "+y);
					loginVal=data[0];
					flaglogin=true;
				}
			}
			//	wait = new WebDriverWait(driver, 10);
			//	wait.until(ExpectedConditions.presenceOfElementLocated(By.id("searchDropDownSelect")));

			//Create Product from LineSheet
			if(data[3].equalsIgnoreCase("Create"))
			{ Create_Specifications(data); }
			//SetState
			if(data[3].equalsIgnoreCase("SetState"))
			{ SetState_Specifications(data); }
			//Read view verification
			if(data[3].equalsIgnoreCase("GeneralAttirbutesRead_View"))
			{  verifyGeneralAttributesReadView(data); }
			//Update Verification
			if(data[3].equalsIgnoreCase("GeneralAttirbutesUpdate"))
			{  verifyGeneralAttributesUpdate(data); }
			//Delete Product
			if(data[3].equalsIgnoreCase("Delete"))
			{ delete_Specifications(data); }

		}catch(Throwable t){
		//	getScreenShot("C:\\Hasbro\\FlexPLM\\ScreenShot","tcSpecifications");
			fail=true;
			ErrorUtil.addVerificationFailure(t);
		}	
	}

	//Prerequisite: Create Specification
	public static String Create_Specifications(String[] data) throws Exception{
		try{
			searchProduct(data);
			//Click on Specification
			clickSpecificationTab(data);
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			Boolean strcreateNewSpec =driver.findElement(createNewSpecification).isDisplayed();
			if(data[3].contains("Create")&& data[4].equalsIgnoreCase("Yes")){
				//Click create New Specification
				CommonFunctions.clickButtonOrLink(createNewSpecification, "btn", "create New Specification");
				wait = new WebDriverWait(driver, 10);
				wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(headingcreateNewSpecification));
				//Fill page
				//Enter wave
				CommonFunctions.enterTextInTextbox(wave, data[7]);
				//Remarks
				CommonFunctions.enterTextInTextbox(remarks, data[8]);
				//Source:first Checkbox
				CommonFunctions.clickButtonOrLink(sourcesFirstCheckbox, "CheckBox", "Source");
				String soureCheckbox =driver.findElement(sourcesFirstCheckbox).getText();
				//click on Create
				CommonFunctions.clickButtonOrLink(Product.createBtn, "btn", "Create");
				//	strPrimary =driver.findElement(By.xpath("//table[@class='PAGEHEADINGTITLE_BG']/tbody/tr/td[1]/div[1]/a/following-sibling::text()[1]")).getText();
				strPrimary=driver.findElement(RO_Primary).getText();
				wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(addNewSpecification));
				System.out.println(strPrimary);
				Assert.assertEquals(strPrimary,"Primary");
			}
			else if(data[3].contains("Create")&& data[4].equalsIgnoreCase("No")){
				Assert.assertFalse(strcreateNewSpec);
			}
			else{
				log.info("Create New is not applicable(NA)");
			}
		}catch(Exception e){ fail=true;
		log.error("Exception in Create_Specifications()", e);
		//	return false;
		}
		return strPrimary;
	}



	public static boolean SetState_Specifications(String[] data) throws Exception{
		try{
			searchProduct(data);
			//Click on Specification
			clickSpecificationTab(data);
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.enterTextInTextbox(specificationAction, data[9]);
			//driver.findElement(specificationAction).sendKeys(Keys.ENTER);
			String valULCSAfterChange=specification_selectUpdateLifecycleState(data);
			Thread.sleep(1000);
			//Click on Update
			CommonFunctions.clickButtonOrLink(Product.linkUpdate, "link", "Update");
			Thread.sleep(1000);
			CommonFunctions.clickButtonOrLink(plusSign, "Plus sign");
			//verification
			String strRO_specificationChangeHistory = driver.findElement(RO_specificationChangeHistory).getText();
			String[] parts = strRO_specificationChangeHistory.split("to");
			System.out.println(parts[1].trim());
			//	System.out.println("strRO_specificationChangeHistory: "+strRO_specificationChangeHistory);
			System.out.println("valULCSAfterChange: "+valULCSAfterChange);

			if(data[3].contains("SetState")&& data[4].equalsIgnoreCase("Yes")){
				Assert.assertEquals(parts[1].trim(), valULCSAfterChange);
			}
			else if(data[3].contains("SetState")&& data[4].equalsIgnoreCase("No")){
				Assert.assertNotEquals(parts[1].trim(), valULCSAfterChange);
			}
			else
				log.info("SetState or chageState is not applicable(NA)");
		}catch(Exception e){ fail=true;
		log.error("Exception in SetState_Specifications()", e);
		return false;
		}
		return true;
	}

	public static boolean delete_Specifications(String[] data) throws Exception{
		try{
			searchProduct(data);
			//Click on Specification
			clickSpecificationTab(data);
			if(data[3].contains("Delete")&& data[4].equalsIgnoreCase("Yes")){
				int countBeforeDelete = driver.findElements(specificationC).size();
				System.out.println(countBeforeDelete);
				CommonFunctions.clickButtonOrLink(specificationAction, "btn", "Action dropdown");
				driver.findElement(deleteSpec).click();
				Thread.sleep(1000);
				driver.switchTo().alert().accept();
				Thread.sleep(1000);
				int countAfterDelete = driver.findElements(specificationC).size();
				Assert.assertEquals(countBeforeDelete,countAfterDelete);
			}
			else if(data[3].contains("Delete")&& data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(specificationAction));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(data[9],options);
				//	dropDownOptionVerification
				Assert.assertFalse(bVal);
			}
			else
				log.info("Delete is not applicable(NA)");
		}catch(Exception e){ fail=true;
		log.error("Exception in delete_Specifications()", e);
		return false;
		}
		return true;
	}


	//Function consist scenario : General Attributes:Read_View
	public static boolean verifyGeneralAttributesReadView(String[] data) throws Exception{
		try{
			searchProduct(data);
			//Click on Specification
			clickSpecificationTab(data);
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			if(data[3].contains("GeneralAttirbutesRead_View")&& data[4].equalsIgnoreCase("Yes")){//Read_View
				if(driver.findElements(Product.labelGeneralAttri).size() != 0){
					String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
					System.out.println(GALabel);
					System.out.println(" General Attributes:");
					Assert.assertEquals(GALabel, " General Attributes:");
					log.info("General Attributes label is Present");
				}else{
					log.error("General Attributes label is Absent");
					fail=true;
				}
			}
			else if(data[3].contains("GeneralAttirbutesRead_View")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(Product.labelGeneralAttri).size() != 0){
					System.out.println("General Attirbutes label is Present");
					log.error("General Attirbutes label is Present");
					fail=true;
				}else{
					log.info("General Attirbutes label is Absent");
				}
			}
			else
			{
				log.info("For this General Attributes is not applicable(NA)");
			}
		}catch(Exception e){ fail=true;
		log.error("Exception in verifyGeneralAttributesReadView()", e);
		return false;
		}
		return true;
	}
	//Function consist scenario : General Attributes://Update
	public static boolean verifyGeneralAttributesUpdate(String[] data) throws Exception{
		try{
			searchProduct(data);
			//Click on Specification
			clickSpecificationTab(data);
			if(data[3].contains("GeneralAttirbutesUpdate")&& data[4].equalsIgnoreCase("Yes")){//Update
				Select select = new Select(driver.findElement(specificationAction));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(data[9],options);
				//	dropDownOptionVerification
				Assert.assertTrue(bVal);
			}
			else if(data[3].contains("GeneralAttirbutesUpdate")&& data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(specificationAction));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(data[9],options);
				//	dropDownOptionVerification
				if(!bVal)
					Assert.assertFalse(bVal);
				else{
					CommonFunctions.enterTextInTextbox(specificationAction, data[9]);
					//	System.out.println(driver.findElements(ROProductName).size());
					//	Assert.assertEquals(driver.findElements(ROProductName).size(), 1, "General Attributes Not Editable"); 
				}
			}	
			else
			{
				log.info("For this General Attributes is not applicable(NA)");
			}
		}catch(Exception e){ fail=true;
		log.error("Exception in verifyGeneralAttributesUpdate()", e);
		return false;
		}
		return true;
	}
	//This funcion is to select Update Lifecycle State	
	public static String specification_selectUpdateLifecycleState(String[] data) throws Exception{
		try{
			valULCS = new Select(driver.findElement(Product.Editable_UpdateLifecycleState)).getFirstSelectedOption().getText();
			String strSupplierReleased ="Supplier Released";
			if(valULCS.contains("In Work")){
				//CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState,strSupplierReleased);
				CommonFunctions.selectFromDropDownByVisibleText(Product.Editable_UpdateLifecycleState, strSupplierReleased);
			}
			else if(valULCS.contains("Under Review")){
				//	CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState, "In Work");
				CommonFunctions.selectFromDropDownByVisibleText(Product.Editable_UpdateLifecycleState, "In Work");
			}
			else if(valULCS.contains("Canceled")){
				//	CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState, "Rework");
				CommonFunctions.selectFromDropDownByVisibleText(Product.Editable_UpdateLifecycleState, "Rework");
			}
			else if(valULCS.contains("Production Released")){
				//	CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState, "Rework");
				CommonFunctions.selectFromDropDownByVisibleText(Product.Editable_UpdateLifecycleState, "Rework");
			}
			else if(valULCS.contains("Supplier Released")){
				//	CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState, "Rework");
				CommonFunctions.selectFromDropDownByVisibleText(Product.Editable_UpdateLifecycleState, "Rework");
			}
			valULCSAfterChange = new Select(driver.findElement(Product.Editable_UpdateLifecycleState)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in selectUpdateLifecycleState()", e);
		}
		return valULCSAfterChange;
	}
	public static boolean searchProduct(String[] data) throws Exception{
		try{
			Thread.sleep(2000);
			driver.switchTo().defaultContent();
			driver.switchTo().frame("headerframe");
			CommonFunctions.waitForVisibilityOfElement(Product.searchProduct);
			driver.findElement(Product.searchProduct).clear();
			CommonFunctions.enterTextInTextbox(Product.searchProduct, data[5]);
			if(CommonFunctions.waitForElementTobeClickable(Product.searchIcon))
				CommonFunctions.clickButtonOrLink(Product.searchIcon, "Btn", "SearchButton");
		}catch(Exception e){ fail=true;
		log.error("Exception in searchProduct()", e);
		return false;
		}
		return true;
	}
	//Function consist scenario : Click on detail tab
	public static boolean clickSpecificationTab(String[] data) throws Exception{
		try{
			driver.switchTo().defaultContent();
			//	wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("contentframe"));
			driver.switchTo().frame("contentframe");
			//	wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(detailsTablink));
			if(CommonFunctions.waitForVisibilityOfElement(specificationsTablink))
				CommonFunctions.clickButtonOrLink(specificationsTablink, "link", "specifications tab");
			CommonFunctions.waitForVisibilityOfElement(addNewSpecification);
			//Select Season
			//	CommonFunctions.enterTextInTextbox(detailPageSeasonDD, data[9]);
			if(!data[3].contains("Delete")){
				if(CommonFunctions.waitForVisibilityOfElement(addNewSpecification)){
					CommonFunctions.clickButtonOrLink(Product.detailPageSeasonDD, "Season dropdown");
					System.out.println(By.xpath("//*[@id='splId']/option[contains(text(),'"+data[6]+"')]"));
					driver.findElement(By.xpath("//*[@id='splId']/option[contains(text(),'"+data[6]+"')]")).click();
				}
			}
		}catch(Exception e){ fail=true;
		log.error("Exception in clickSpecificationTab()", e);
		return false;
		}
		return true;
	}

	public static boolean dropDownOptionVerificationActions(String a,List<WebElement> b) {
		try{	
			for (WebElement option : b) {
				System.out.println(option.getText());
				System.out.println("a: "+a);
				if (option.getText().equalsIgnoreCase(a)) {
					return true;
				}
			}
			return false;
		}catch(Exception e){ fail=true;
		SeleniumDriver.log.error("Exception in dropDownOptionVerificationActions()", e);
		return false;
		}
	}

	

	/**
	 * Saves the screenshot to the specified Location
	 *
	 * @param filePathToSave
	 */
	public static void getScreenShot(String filePathToSave,String imageName){
		java.awt.Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		Rectangle screen = new Rectangle(0, 0, screenSize.width, screenSize.height);
		Robot robot;
		try {
			robot = new Robot();
			BufferedImage image = robot.createScreenCapture(screen);
			File capturedScreenshotFile = new File (filePathToSave);
			try {
				ImageIO.write ( image, "png", capturedScreenshotFile );
				System.out.println("Screenshot saved at ("+filePathToSave+")");
			} catch (IOException e) {
				e.printStackTrace();
			}
		} catch(AWTException e) {
			e.printStackTrace();
		}
	}


	@AfterMethod
	public void reporterdataSetResult(ITestResult result) throws Exception{
		if(skip)
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "SKIP");
		else if(fail){
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "FAIL");
			isTestPass=false;
		//	takeScreenShotOnFailure(result);
		}
		else
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "PASS");
		skip=false;
		fail=false;
	}
	
	public void takeScreenShotOnFailure(ITestResult testResult) throws Exception {
		System.out.println(testResult.getStatus());
		System.out.println(ITestResult.FAILURE);
	//	if (testResult.getStatus())ITestResult.FAILURE) 
	//	{
			failure =true;
			//System.out.println(testResult.getMethod().getMethodName()); 
			String s1 = testResult.getMethod().getMethodName();
			String substring = s1.substring(Math.max(s1.length() - 2, 0));
			String imageName = imgPath+"\\INC0290848_"+substring+".png";
			getScreenShot("",imageName);
	//	} 
	}
	public void getscreenshot(String imageName) throws Exception 
	{
		File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
		//The below method will save the screen shot in d drive with name "screenshot.png"
		FileUtils.copyFile(scrFile, new File(imageName));
	}
	
	
	@BeforeTest
	public void checkTestcaseSkip() throws Exception{

		if(!Utility.isCaseRunnable(suiteSecurityXls, this.getClass().getSimpleName())){
			log.debug("Skipping "+this.getClass().getSimpleName()+" as runmode is set to no");
			throw new SkipException("Skipping "+this.getClass().getSimpleName()+" as runmode is set to no");
		}
		runmodes=Utility.getDataSetRunmodeTest(suiteSecurityXls, this.getClass().getSimpleName());
	}
	@AfterTest
	public void reportTestcaseResult(){
		if(isTestPass){
			Utility.dataSetResult(suiteSecurityXls,"Testcases", Utility.getRowNum(suiteSecurityXls, this.getClass().getSimpleName()),"PASS");
		}else
			Utility.dataSetResult(suiteSecurityXls,"Testcases", Utility.getRowNum(suiteSecurityXls, this.getClass().getSimpleName()),"FAIL");

	}

	@DataProvider
	public Object[][] testDataTest(){
		return Utility.getData(suiteSecurityXls, this.getClass().getSimpleName());
	}

}
