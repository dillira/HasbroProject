package com.hasbro.security;
/**
 * @author Anjali Gupta
 *Prerequisite :
 *1. Product should be created and added in column 5
 *2. Colorway should be created and added in column 6 
 */
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.SkipException;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.hasbro.PC.PartMgmtFunctional;

import base.SeleniumDriver;
import util.CommonFunctions;
import util.CommonProjectFunctions;
import util.ErrorUtil;
import util.Utility;



public class MaterialBOM extends TestsuiteBase{

	String runmodes[]=null;
	static int count=-1;
	static boolean skip=false;
	static boolean fail=false;
	static boolean isTestPass=true;
	static WebDriverWait wait=null;
	public static By addNewBOMTab= By.xpath("//a[contains(text(),'Add New BOM')]");
	//	public static By BOMDetails= By.xpath("//li[@id='DETAILS_PAGETab']/a");
	public static By initializeBOM= By.xpath("//a[contains(text(),'Initialize BOM')]");
	public static By headingCreateBOM= By.xpath("//td[contains(text(),'Create BOM')]");
	public static By name= By.xpath("//td[contains(text(),'Name')]//following::input[1]");
	//	public static By colorwayName= By.xpath("//td[contains(text(),'Colorway Name')]//following::select[1]");
	public static By colorway= By.xpath("//td[contains(text(),'Colorway')]//following::select[1]");
	public static By wave= By.xpath("//td[contains(text(),'Wave')]//following::select[1]");
	public static By currency= By.xpath("//td[contains(text(),'Currency')]//following::select[1]");

	public static By selectSource= By.id("sourcingConfigId");
	public static By selectExistingSpec= By.id("existingSetList");

	public static By selectSpecification= By.id("contextSpecId");
	public static By compOrLoca= By.id("r1_partName");
	public static By checmicalDesc= By.id("r2_partName");

	public static By quantity= By.id("r1_quantity");
	public static By meterial= By.id("r1_materialDescription");
	public static By meterialRow2= By.id("r2_materialDescription");

	public static By plasticDescription= By.xpath("//table[contains(@id,'TBLT')]/tbody/tr[3]/td[1]");
	public static By plasticMeterialDesc= By.xpath(".//table[contains(@id,'TBLT')]/tbody/tr[3]/td[3]");

	public static By chemicalsDescription= By.xpath("//table[contains(@id,'TBLT')]/tbody/tr[5]/td[1]");
	public static By chemicalsMeterialDesc= By.xpath(".//table[contains(@id,'TBLT')]/tbody/tr[5]/td[3]");


	public static By headingEditBOM= By.xpath("//td[contains(text(),'Edit BOM')]");
	public static By inputCompOrLoca= By.xpath("//div[@id='partNameSourceDiv']/input");
	public static By inputquantity= By.xpath("//div[@id='quantitySourceDiv']/input");
	public static By inputMaterial= By.xpath("//div[@id='materialDescriptionSourceDiv']/textarea");

	public static By btnSaveAndCheckIn= By.xpath("//a[text()='Save and Check In']");
	public static By headerAttributes= By.xpath("//div[@id='genDetails_plus']/a[2]");
	public static By headerAttributesBtn= By.xpath("//a[contains(text(),'Header Attributes')]");

	public static By BOMId= By.id("bomId");
	public static By BOMTypeId= By.id("bomTypeId");
	public static By headerAttributesPlus= By.xpath("//div[@id='genDetails_plus']/a[1]/img");
	public static By headerAttributeExpand= By.xpath("//div[@id='genDetails_plus']/a[1]/img[@src='/Windchill/netmarkets/images/expand_tree.png']");
	public static By headerAttributeCollapse= By.xpath("//div[@id='genDetails_plus']/a[1]/img[@src='/Windchill/netmarkets/images/collapse_tree.png']");
	public static By BOMAction= By.xpath("//div[@id='UPDATE_BTNS']//a[contains(text(),'Actions')]");
	public static By checkedOutByYou= By.xpath("//td[contains(text(),'Checked Out by: You')]");
	public static By billOfMaterials= By.xpath("//select[@id='bomId']/option[@selected='']");
	public static By RO_UpdateLifecycleState = By.xpath("//div[contains(@id,'systemInformationOR')]//td[contains(text(),'Lifecycle State')]//following::td[1]");
	public static By updateBtn= By.xpath("//a[contains(text(),'Update')]");
	public static By RO_compLoc= By.xpath("//table[@class='TABLE_OUTLINE']/tbody/tr[3]/td[1]");
	public static By RO_quantity= By.xpath("//table[@class='TABLE_OUTLINE']/tbody/tr[3]/td[2]");
	public static By setState= By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Set State')]");
	public static By actionDD= By.id("prodseasonActions");
	public static By manager   = By.xpath("//td[contains(text(),'Manager')]//following::select[1]");
	public static By sourcingLead   = By.xpath("//td[contains(text(),'Sourcing Lead')]//following::select[1]");
	public static By sourcingHead   = By.xpath("//td[contains(text(),'Sourcing Head')]//following::select[1]");
	public static By management   = By.xpath("//td[contains(text(),'Management')]//following::select[1]");
	public static By BOMDetails  = By.xpath("//a[text()='BOM Details']");

	public static By BOMIdentification  = By.xpath("//td[contains(text(),'BOM Identification')]");
	public static By BOMCostSummary  = By.xpath("//td[contains(text(),'BOM Cost Summary')]");
	public static By BOMComments  = By.xpath("//td[contains(text(),'Comments')]");
	public static By EnterComments  = By.xpath("//a[text()='Enter Comment']");
	public static By PostNewComment  = By.xpath("//td[contains(text(),'Post New Comment')]//following::textarea[1]");
	public static By post  = By.xpath("//a[text()='Post']");
	public static By descHeading  = By.xpath("//td[@class='TABLESUBHEADER' and text()='Description']");
	public static By plastics  = By.xpath("//a[contains(text(),'Plastics')]");

	public static By BOMStatus  = By.xpath("//td[contains(text(),'BOM Status')]//following::select[1]");

	public static By ROComment  = By.xpath("//a[contains(text(),'User')]//following::td[1]");

	//Meterial
	public static By meterialTab  = By.xpath("//a[text()='Materials']");
	public static By meterialSource= By.id("supplierLinkId");
	public static By sourcingTab  = By.xpath("//a[text()='Sourcing']");
	public static By meterialSupplierAction= By.id("supplierSelect");
	public static By supplierNameColumn  = By.xpath("//div[@id='chooserResultsDiv']/table/tbody/tr[5]/td/div[3]/table/tbody/tr/td[2]");
	public static By supplierNextBtn  = By.xpath("//a[text()='Next']");
	public static By supplierShowAll  = By.xpath("//td[@class='SEARCH_RESULTS_BAR']/span/a[contains(text(),'Show All')]");
	public static By selectBtn  = By.xpath("//a[text()='Select']");
	public static By meterialColor  = By.id("materialColorId");
	public static By colorLink  = By.xpath("//a[text()='Colors']");
	public static By selectMeterialColor = By.xpath("//div[@id='colorDevelopmentSpace']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select");
	public static By btnSearch = By.id("SearchButton2");
	public static By createtBtn = By.xpath("//a[text()='Create']");
	public static By colorCloseIcon = By.xpath("//img[@src='https://hasbroplm-test.ptcmanaged.com/Windchill/netmarkets/images/closebutton.png']");
	public static By billMeterial = By.xpath("//td[contains(text(),'Bill of Materials')]");



	int y=0;
	String loginVal;
	Boolean flaglogin=false;
	static String valULCS;
	static String valULCSAfterChange;
	public static String BOMname;
	static String strBillOfMaterials;
	static Boolean bCheckedOut=false;
	static Actions action;
	public static String strRO_UpdateLifecycleState;
	static String strUpdate;
	static String strRO_quantity;
	static String strSpec;
	static String  strSource;
	static String strCW;
	static String strBOMDetail;
	static String BOMnameInWork;
	static String BOMnameUnderReview;
	static String BOMnameReleased;
	static String BOMnameCancelled;
	static String BOMnameRejected;
	static String BOMnameReadyforReview;
	static String matName;
	static String addedColor;
	static String  addedSupp;

	@Test(dataProvider="testDataTest")
	//public void tcProduct(String login, String pwd, String AttributeGroup, String Verification,String Create, String SetState, String ReadView, String UpdateProduct,String UpdateProductSeason, String Delete,String SeasonYear,String LSAction,String LSViews) throws Exception{
	public void tcBOM(String[] data) throws Exception{
		try{
			count++;
			System.out.println(runmodes[count]);
			if(!runmodes[count].equalsIgnoreCase("y")){
				skip=true;
				log.debug(this.getClass().getSimpleName()+" Testdata row number "+(count+1)+" is skippped as runmode is set to N");
				throw new SkipException(this.getClass().getSimpleName()+" Testdata row number "+(count+1)+" is skipped as runmode is set to N");
			}
			log.debug("Inside testcase for Security BOM");
			System.out.println("col0 :" + data[0]);
			System.out.println("col1 :" + data[1]);
			System.out.println("attribute group :" + data[2]);
			System.out.println("verification :" + data[3]);
			if(flaglogin==true)
			{
				if(!loginVal.equalsIgnoreCase(data[0])){
					y=0;
					flaglogin=false;
					CommonProjectFunctions.logOut();
					driver.quit();
				}
			}
			if(runmodes[count].equalsIgnoreCase("y")){
				if(y==0){
					openBrowser();
					launchApp(data[0],data[1]);
					y++;
					System.out.println("y: "+y);
					loginVal=data[0];
					flaglogin=true;
				}
			}

			//Create Product from LineSheet
			/*	if(data[3].equalsIgnoreCase("CreateUnderReview"))
			{ CreateUnderReview_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateReleased"))
			{ CreateReleased_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateCancelled"))
			{ CreateCancelled_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateRejected"))
			{ CreateRejected_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateReadyforReview"))
			{ CreateReadyforReview_BOM(data); }
			if(data[3].equalsIgnoreCase("Create"))
			{ Create_BOM(data); }*/

			if(data[3].equalsIgnoreCase("CreateMeterialBOM"))
			{ Create_Material(data); }
			if(data[3].equalsIgnoreCase("readView"))
			{ readView_BOM(data); }
			if(data[3].equalsIgnoreCase("update"))
			{ update_BOM(data); }

			//Delete Product
			if(data[3].equalsIgnoreCase("Delete"))
			{ delete_BOM(data); }
			
			/******************************************************/
			if(data[3].equalsIgnoreCase("inWorkReadView"))
			{ InWorkreadView_BOM(data); }
			if(data[3].equalsIgnoreCase("inWorkUpdate"))
			{ InWorkUpdate_BOM(data); }

			if(data[3].equalsIgnoreCase("UnderReviewReadView"))
			{ underReviewReadView(data); }
			if(data[3].equalsIgnoreCase("UnderReviewUpdate"))
			{ underReviewUpdate(data); }

			if(data[3].equalsIgnoreCase("ReleasedReadView"))
			{ releasedReadView(data); }
			if(data[3].equalsIgnoreCase("ReleasedUpdate"))
			{ releasedUpdate(data); }

			if(data[3].equalsIgnoreCase("CancelledReadView"))
			{ cancelledReadView(data); }
			if(data[3].equalsIgnoreCase("CancelledUpdate"))
			{ cancelledUpdate(data); }

			if(data[3].equalsIgnoreCase("RejectedReadView"))
			{ rejectedReadView(data); }
			if(data[3].equalsIgnoreCase("RejectedUpdate"))
			{ rejectedUpdate(data);   }

			if(data[3].equalsIgnoreCase("ReadyforReviewReadView"))
			{ readyForReviewReadView(data); }
			if(data[3].equalsIgnoreCase("ReadyforReviewUpdate"))
			{ readyForReviewUpdate(data);   }

			/******************************************************/
			
			if(data[3].equalsIgnoreCase("BOMIdentificationReadView"))
			{ verifyBOMIdentificationReadView(data); }
			if(data[3].equalsIgnoreCase("BOMIdentificationUpdate"))
			{ verifyBOMIdentificationUpdate(data); }

			//Read view verification
			if(data[3].equalsIgnoreCase("GeneralAttributesRead_View"))
			{  verifyGeneralAttributesReadView(data); }
			//Update Verification
			if(data[3].equalsIgnoreCase("GeneralAttributesUpdate"))
			{  verifyGeneralAttributesUpdate(data); }

			if(data[3].equalsIgnoreCase("BOMSectionsRead"))
			{ verifyBOMSectionsRead(data); }
			if(data[3].equalsIgnoreCase("BOMSectionsUpdate"))
			{ verifyBOMSectionsUpdate(data); }

		}catch(Throwable t){
			fail=true;
			ErrorUtil.addVerificationFailure(t);
		}	
	}


	//Create Material BOM
	//Prerequisite: Create Product
	public static boolean Create_Material(String[] data) throws Exception{
		try{
			driver.navigate().refresh();
			Thread.sleep(1000);
			driver.switchTo().frame("sidebarframe");
			// Click on Libraries
			CommonFunctions.clickButtonOrLink(Material.libraryLink, "Link", "Library Link");
			//Click on Color link
			driver.findElement(Material.materialLink).click();
			//Switch frame
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			wait = new WebDriverWait(driver, 10);
			wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(Material.materialHeadning));
			//Checking and Validating New Button on Material Search Page
			boolean newType=false;
			Packaging.isPresent(Material.newLink, newType);
			if(data[5].equalsIgnoreCase("Yes")){
				//Click on new
				CommonFunctions.clickButtonOrLink(Material.newLink, "link", "New Link");
				wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(Material.chooseaType));
				//Click on color type
				CommonFunctions.clickButtonOrLink(By.xpath("//a[contains(text(),'"+data[4]+"')and @class='LABEL']"), "link", "Material Type");
				System.out.println(By.xpath("//a[contains(text(),'"+data[4]+"')and @class='LABEL']"));

				switch (data[4]) {
				case "Fabric":
					fillMaterailMandatory(data);
					fillMatFabric(data);
					Material.createMaterial(data);
					createMeterialBOM(data);
					break;
				case "Trim":
					fillMaterailMandatory(data);
					fillMatTrim(data);
					Material.createMaterial(data);
					createMeterialBOM(data);
					break;
				case "Resin":
					mandatoryData(data);
					createResin(data);
					Material.createMaterial(data);
					createMeterialBOM(data);
					break;
				case "Labor":
					mandatoryData(data);
					createLabor(data);
					Material.createMaterial(data);
					createMeterialBOM(data);
					break;
				default:
					fail=true;
					log.info("Default is executed");
				}
			}
			else if(data[3].contains("Create")&& data[4].equalsIgnoreCase("No")){
				Assert.assertFalse(newType, "New Link not available");
			}
			else{
				log.info("Create is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in Create_Material()", e);
			return false;
		}
		return true;
	}
	static String fillMaterailMandatory(String[] data) throws Exception {
		// TODO Auto-generated method stub
		try{
			wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(Material.materialName));
			matName=data[4]+CommonFunctions.getRandomString(5);
			CommonFunctions.enterTextInTextbox(Material.materialName,matName);

			CommonFunctions.enterTextInTextbox(Material.parentRefNumber, data[9]);
			driver.findElement(Material.cBlack).click();
			log.info("cBlack is Selected!!!");
			driver.findElement(Material.crADD).click();
			log.info("crADD is Selected!!!");
			// Send Material Description Details
			CommonFunctions.enterTextInTextbox(Material.description, data[22]);
			// Send Comments for Creating Materials Details
			CommonFunctions.enterTextInTextbox(Material.comments, data[23]);
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in fillMaterailMandatory()", e);
		}
		return matName;
	}	

	private static void fillMatFabric(String[] data) throws Exception {
		// TODO Auto-generated method stub
		try{
			//Select Construction Type From drop down
			CommonFunctions.selectFromDropDownByVisibleText(Material.construction, data[12]);
			//Select Construction Type From drop down
			CommonFunctions.selectFromDropDownByVisibleText(Material.constructionType, data[10]);
			//Select Secondary Construction Type From drop down
			CommonFunctions.selectFromDropDownByVisibleText(Material.secondaryConstruction, data[11]);

			//Select Content From drop down
			CommonFunctions.selectFromDropDownByVisibleText(Material.content, data[13]);
			// Send Content Percent values
			CommonFunctions.enterTextInTextbox(Material.percent, data[14]);
			//Click On Add button
			CommonFunctions.clickButtonOrLink(Material.cpADD, "btn", "cpADD");
			//Select Content From drop down
			CommonFunctions.selectFromDropDownByVisibleText(Material.content, data[15]);
			// Send Content Percent values
			CommonFunctions.enterTextInTextbox(Material.percent, data[16]);
			//Click On Add button
			CommonFunctions.clickButtonOrLink(Material.cpADD, "btn", "cpADD");
			// Send Weight
			CommonFunctions.enterTextInTextbox(Material.weightGYD, data[17]);
			//Send Pile Height
			CommonFunctions.enterTextInTextbox(Material.pileHeightmm, data[18]);
			//Caoting PU
			driver.findElement(Material.coatingPU).click();
			log.info("coatingPU is Selected!!!");
			CommonFunctions.clickButtonOrLink(Material.coatingADD, "btn", "coatingADD");
			//Finishes Anti Pilling
			driver.findElement(Material.finishesAntiPilling).click();
			log.info("finishesAntiPilling is Selected!!!");
			CommonFunctions.clickButtonOrLink(Material.finishesADD, "btn", "finishesADD");
			//Print Type Back Side Print
			driver.findElement(Material.printTypeBacksidePrint).click();
			log.info("printTypeBacksidePrint is Selected!!!");
			CommonFunctions.clickButtonOrLink(Material.printTypeADD, "btn", "printTypeADD");

		}
		catch(Exception e){
			fail=true;
			log.error("Exception in fillMatFabric()", e);
		}
	}

	private static void fillMatTrim(String[] data) throws Exception {
		// TODO Auto-generated method stub
		try{
			//Select Trim Type from Drop down
			CommonFunctions.selectFromDropDownByVisibleText(Material.trimType, data[16]);
			//Send Size
			CommonFunctions.enterTextInTextbox(Material.size, data[15]);
			//Select Coating
			CommonFunctions.selectFromDropDownByVisibleText(Material.coatings, data[17]);
			CommonFunctions.selectFromDropDownByVisibleText(Material.sizeUOM, data[18]);
			//Construction Type
			driver.findElement(Material.construction1Type).click();
			log.info("construction Type is Selected!!!");
			CommonFunctions.clickButtonOrLink(Material.constructionADD, "btn", "constructionADD");
			//Select Content From drop down
			CommonFunctions.selectFromDropDownByVisibleText(Material.content1, data[10]);
			// Send Content Percent values
			CommonFunctions.enterTextInTextbox(Material.percent1, data[11]);
			//Click On Add button
			CommonFunctions.clickButtonOrLink(Material.cpADD1, "btn", "cpADD1");
			//Select Content From drop down
			CommonFunctions.selectFromDropDownByVisibleText(Material.content1, data[12]);
			// Send Content Percent values
			CommonFunctions.enterTextInTextbox(Material.percent1, data[13]);
			//Click On Add button
			CommonFunctions.clickButtonOrLink(Material.cpADD1, "btn", "cpADD1");
			//Print Type
			driver.findElement(Material.printType).click();
			log.info("printType is Selected!!!");
			CommonFunctions.clickButtonOrLink(Material.printADD, "btn", "printADD");
			//Finishes
			driver.findElement(Material.finishes).click();
			log.info("finishes is Selected!!!");
			CommonFunctions.clickButtonOrLink(Material.finishes1ADD, "btn", "finishes1ADD");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in fillMatTrim()", e);
		}
	}

	private static boolean mandatoryData(String[] data) throws Exception {
		// TODO Auto-generated method stub
		try{ 
			Date date = new Date();
			wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(Material.materialName));
			CommonFunctions.enterTextInTextbox(Material.materialName,data[5]+date.getTime());
			//Search for Season from POPUP Page
			CommonFunctions.clickButtonOrLink(PartMgmtFunctional.season, "link", "Season");
			Set set1 = driver.getWindowHandles();
			Iterator iter1 = set1.iterator();
			String parent1 = (java.lang.String) iter1.next();
			String child1 = (java.lang.String) iter1.next();
			driver.switchTo().window(child1);
			CommonFunctions.enterTextInTextbox(PartMgmtFunctional.seasonNumber, data[9]);
			CommonFunctions.clickButtonOrLink(PartMgmtFunctional.search, "Search For Season");
			CommonFunctions.clickButtonOrLink(PartMgmtFunctional.choose, "Season selected");
			driver.switchTo().window(parent1);
			driver.switchTo().frame("contentframe");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in mandatoryData()", e);
			return false;
		}
		return true;
	}

	/**
	 * 
	 * @param data
	 * @return
	 * @throws Exception
	 */
	private static boolean createResin(String[] data) throws Exception {
		// TODO Auto-generated method stub
		try{ 
			//Select processing Method Type From drop down
			CommonFunctions.selectFromDropDownByVisibleText(PartMgmtFunctional.processingMethod, data[6]);

			// Send Resin Description Description Details
			CommonFunctions.enterTextInTextbox(PartMgmtFunctional.resinDescription, data[7]);

			// Send Density (gr/gm2) Description Details
			CommonFunctions.enterTextInTextbox(PartMgmtFunctional.density, data[8]);
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in createResin()", e);
			return false;
		}
		return true;
	}

	private static boolean createLabor(String[] data) throws Exception {
		// TODO Auto-generated method stub
		try{ 
			//Select Operation Type From drop down
			CommonFunctions.selectFromDropDownByVisibleText(PartMgmtFunctional.operationType, data[6]);

			// Send Labor Description  Details
			CommonFunctions.enterTextInTextbox(PartMgmtFunctional.laborDescription, data[7]);
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in createLabor()", e);
			return false;
		}
		return true;
	}	

	public static String createMeterialBOM(String[] data) throws Exception{
		try{
			//Click on meterial
			CommonFunctions.clickButtonOrLink(meterialTab, "link", "Meterial");
			addedSupp = AddMeterialSource(data);
			addedColor= AddColor(data);
			//Click on meterial
			CommonFunctions.clickButtonOrLink(meterialTab, "link", "Meterial");
			//Click on initialize BOM
			CommonFunctions.clickButtonOrLink(initializeBOM,"btn", "Initialize BOM");
			//Click on Create
			CommonFunctions.clickButtonOrLink(createtBtn,"btn", "Create");
			//Switch to mainframe
			driver.switchTo().frame("mainFrame");
			//	wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(headingEditBOM));
			//Component or Location
			action = new Actions(driver);
			action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
			//Quanity
			action.moveToElement(driver.findElement(quantity)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputquantity, data[10]);
			//Click button btnSaveAndCheckIn
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");
			String strHeader=driver.findElement(billMeterial).getText();
			Assert.assertEquals(strHeader, "Bill of Materials:");

		}catch(Exception e){
			fail=true;
			log.error("Exception in createMeterialBOM()", e);
			return "";
		}
		return BOMname;
	}

	public static Boolean ClickMeterial(String[] data) throws Exception{
		try{
			CommonFunctions.clickButtonOrLink(meterialTab, "Tab", "Material");

		}catch(Exception e){
			fail=true;
			log.error("Exception in AddColorway()", e);
			return false;
		}
		return true;
	}

	public static String AddColor(String[] data) throws Exception{
		try{
			//Click on Meterial tab
			CommonFunctions.clickButtonOrLink(meterialTab, "link", "Meterial");
		//	CommonFunctions.clickButtonOrLink(colorLink, "tab", "Color");
			//Add colorway
			Select dropDownCW = new Select(SeleniumDriver.driver.findElement(meterialColor));
			List<WebElement> elementCountCW = dropDownCW.getOptions();
			int countCW =elementCountCW.size();
			//	int count =SeleniumDriver.driver.findElements(selectSpecification).size();
			if(countCW>=2)
			{
				CommonFunctions.selectFromDropDownByIndex(meterialColor, 1);
				strCW=new Select(driver.findElement(meterialColor)).getFirstSelectedOption().getText();
			}
			else
			{
				strCW= Add_Color(data);
			}
			log.info("Colorway is: "+strCW);
		}catch(Exception e){
			fail=true;
			log.error("Exception in AddColorway()", e);
			return "";
		}
		return strCW;
	}

	public static String AddMeterialSource(String[] data) throws Exception{
		try{
			//Add Source
			Select dropDownSource = new Select(SeleniumDriver.driver.findElement(meterialSource));
			List<WebElement> elementCountSource = dropDownSource.getOptions();
			int countSource =elementCountSource.size();
			//log.info("Number of supplier: " + countSource);
			if(countSource>2)
			{
				CommonFunctions.selectFromDropDownByIndex(meterialSource, 1);
				strSource=new Select(driver.findElement(meterialSource)).getFirstSelectedOption().getText();
			}
			else
			{
				AddSupplier(data);
				CommonFunctions.selectFromDropDownByIndex(meterialSource, 1);
				strSource=new Select(driver.findElement(meterialSource)).getFirstSelectedOption().getText();
			}
			log.info("Source is: "+strSource);
		}catch(Exception e){
			fail=true;
			log.error("Exception in AddMeterialSource()", e);
			return "";
		}
		return strSource;
	}


	public static boolean readView_BOM(String[] data) throws Exception{
		try{
			/*CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();*/

			if(data[3].contains("ReadView")&& data[4].equalsIgnoreCase("Yes")){
				//	Assert.assertEquals(strBOMDetail, "BOM Details");
			}
			else if(data[3].contains("ReadView")&& data[4].equalsIgnoreCase("No")){
				Assert.assertEquals(driver.findElements(BOMDetails).size(), 0, "BOM detail tab is not present"); 
			}
			else{
				log.info("Not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean update_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//CommonFunctions.waitForVisibilityOfElement(headingEditBOM);
				String strEditPage = driver.findElement(headingEditBOM).getText();
				strEditPage=strEditPage.substring(0, 7);
				Assert.assertEquals(strEditPage, "Edit BOM");
				log.info("Edit BOM page is displayed");
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this update_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}


	public static boolean delete_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);

			if(data[3].contains("Delete")&& data[4].equalsIgnoreCase("Yes")){
				//CreateSpecification
				String strSpec= CommonProjectFunctions.Create_Specifications(data[11],data[12]);
				System.out.println("Specification is: "+strSpec);
				CommonProjectFunctions.clickMaterialsTab();

				if(driver.findElements(checkedOutByYou).size()>0){
					CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
					//Check In
					driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Check In')]")).click();
				}
				strBillOfMaterials = driver.findElement(billOfMaterials).getText();
				CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
				//CommonFunctions.clickButtonOrLink(deleteSpec, "option", "Delete Spec");
				driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'"+data[13] +"')]")).click();
				//	Thread.sleep(3000);
				CommonFunctions.waitForVisibilityOfElement(Product.headerDeleteObject);
				//Click on delete button
				CommonFunctions.clickButtonOrLink(Product.deleteButton,"btn", "Delete");
				driver.switchTo().alert().accept(); 
				//	CommonFunctions.handleAlertPopUp();
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(strBillOfMaterials,options);
				//	dropDownOptionVerificationverifying deleted one is not present in dropdown
				Assert.assertFalse(bVal);
			}
			else if(data[3].contains("Delete")&& data[4].equalsIgnoreCase("No")){
				CommonProjectFunctions.clickMaterialsTab();
				CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
				System.out.println(driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Delete')]")).getAttribute("disabled"));
				String bDelete= driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Delete')]")).getAttribute("disabled");
				//	dropDownOptionVerification : verifying deleted one is not present in dropdown
				Assert.assertEquals("true", bDelete);
			}
			else
				log.info("Delete is not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in delete_BOM()", e);
			return false;
		}
		return true;
	}

	/**************************************************************************/
	
	//Function consist scenario : BOMIdentificationReadView:Read_View
	public static boolean verifyBOMIdentificationReadView(String[] data) throws Exception{
		try{
			driver.navigate().refresh();
			Thread.sleep(1000);
			CommonProjectFunctions.searchAttributeType("Material", matName);
			//Click on Meterial
			CommonFunctions.clickButtonOrLink(meterialTab, "tab", "Meterial");
			CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
		
			if(data[3].contains("BOMIdentificationReadView")&& data[4].equalsIgnoreCase("Yes")){//Read_View
				
				if(driver.findElements(BOMIdentification).size() != 0){
					String BILabel=driver.findElement(BOMIdentification).getText();
					Assert.assertEquals(BILabel.trim(), "BOM Identification");
					log.info("BOM IdentificationReadView label is Pass");
				}else{
					log.error("BOMIdentification ReadView label is Fail");
					fail=true;
				}
			}
			else if(data[3].contains("BOMIdentificationReadView")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(BOMIdentification).size() != 0){
					//	log.info("BOMIdentificationReadView label is Present");
					log.error("BOMIdentificationReadView label is Present");
					fail=true;
				}else{
					log.info("BOMIdentificationReadView label is Absent");
				}
			}
			else
			{
				log.info("For this BOMIdentificationReadView is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyBOMIdentificationReadView()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : BOMIdentificationReadView://Update
	public static boolean verifyBOMIdentificationUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();

			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");
				BOMname=BOMname+"1";
				CommonFunctions.enterTextInTextbox(name, BOMname);
				//Click 'Save and Check In'
				CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
				CommonFunctions.handleAlertPopUp();
				String strBOM=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();
				strBOM=strBOM.substring(6, 14);
				Assert.assertEquals(strBOM.trim(),BOMname);
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this BOMIdentification is not applicable(NA)");
			}
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in verifyBOMIdentificationUpdate()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : General Attributes:Read_View
	public static boolean verifyGeneralAttributesReadView(String[] data) throws Exception{
		try{
			driver.navigate().refresh();
			Thread.sleep(1000);
			CommonProjectFunctions.searchAttributeType("Material", matName);
			//Click on Meterial
			CommonFunctions.clickButtonOrLink(meterialTab, "tab", "Meterial");
			CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

			if(data[3].contains("GeneralAttributesRead_View")&& data[4].equalsIgnoreCase("Yes")){//Read_View
			//	CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				if(driver.findElements(Product.labelGeneralAttri).size() != 0){
					String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
					Assert.assertEquals(GALabel, " General Attributes:");
					log.info("General Attributes label is Present");
				}else{
					log.error("General Attributes label is Absent");
					fail=true;
				}
			}
			else if(data[3].contains("GeneralAttributesRead_View")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(Product.labelGeneralAttri).size() != 0){
					System.out.println("General Attirbutes label is Present");
					log.error("General Attirbutes label is Present");
					fail=true;
				}else{
					log.info("General Attirbutes label is Absent");
				}
			}
			else
			{
				log.info("For this General Attributes is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyGeneralAttributesReadView()", e);
			return false;
		}
		return true;
	}
	//Function consist scenario : General Attributes://Update
	public static boolean verifyGeneralAttributesUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			if(data[3].contains("GeneralAttributesUpdate")&& data[4].equalsIgnoreCase("Yes")){//Update
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");
				//	BOMname=BOMname+"1";
				//CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, inputValue)
				valULCSAfterChange=changeBOMStatus();
				//Click 'Save and Check In'
				CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
				CommonFunctions.handleAlertPopUp();
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				//Verification
				String strStatus=driver.findElement(RO_UpdateLifecycleState).getText();
				Assert.assertEquals(strStatus.trim(),valULCSAfterChange);
			}
			else if(data[3].contains("GeneralAttributesUpdate")&& data[4].equalsIgnoreCase("No")){
				CommonProjectFunctions.clickMaterialsTab();
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this General Attributes is not applicable(NA)");
			}
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in verifyGeneralAttributesUpdate()", e);
			return false;
		}
		return true;
	}
	

	//Function consist scenario : BOMSectionsRead:Read_View
	public static boolean verifyBOMSectionsRead(String[] data) throws Exception{
		try{
			driver.navigate().refresh();
			Thread.sleep(1000);
			CommonProjectFunctions.searchAttributeType("Material", matName);
			//Click on Meterial
			CommonFunctions.clickButtonOrLink(meterialTab, "tab", "Meterial");
			CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

			if(data[3].contains("BOMSectionsRead")&& data[4].equalsIgnoreCase("Yes")){//Read_View
			//	CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				if(driver.findElements(descHeading).size() != 0){
					String descHeadLabel=driver.findElement(descHeading).getText();
					Assert.assertEquals(descHeadLabel.trim(), "Description");
					log.info("BOMSectionsRead label is Present");
				}else{
					log.error("BOMSectionsRead label is Absent");
					fail=true;
				}
			}
			else if(data[3].contains("BOMSectionsRead")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(descHeading).size() != 0){
					System.out.println("BOMSections label is Present");
					log.error("BOMSectionsRead label is Present");
					fail=true;
				}else{
					log.info("BOMSectionsRead label is Absent");
				}
			}
			else
			{
				log.info("For this BOMSectionsRead is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyBOMSectionsRead()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : BOMSections://Update
	public static boolean verifyBOMSectionsUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();

			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			if(data[4].equalsIgnoreCase("Yes")){//Update
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				driver.switchTo().frame("mainFrame");
				//Component or Location
				action = new Actions(driver);
				action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
				//Meterial Desc
				action.moveToElement(driver.findElement(meterial)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputMaterial, data[16]);

				//Fill Chemical section
				action.moveToElement(driver.findElement(checmicalDesc)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[17]);
				//Meterial Desc
				action.moveToElement(driver.findElement(meterialRow2)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputMaterial, data[18]);

				//Click 'Save and Check In'
				CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
				CommonFunctions.handleAlertPopUp();
				//Switch to contentFrame
				driver.switchTo().frame("contentframe");

				String strplasticDescription=driver.findElement(plasticDescription).getText();
				Assert.assertEquals(strplasticDescription, data[9]);

				String strplasticMeterialDesc=driver.findElement(plasticMeterialDesc).getText();
				Assert.assertEquals(strplasticMeterialDesc, data[16]);

				String strchemicalsDescription=driver.findElement(chemicalsDescription).getText();
				Assert.assertEquals(strchemicalsDescription, data[17]);

				String strchemicalsMeterialDesc=driver.findElement(chemicalsMeterialDesc).getText();
				Assert.assertEquals(strchemicalsMeterialDesc, data[18]);
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this General Attributes is not applicable(NA)");
			}
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in verifyGeneralAttributesUpdate()", e);
			return false;
		}
		return true;
	}

	/**************************************************************************/
	public static boolean InWorkreadView_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select In Work BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameInWork);
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");

				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");
			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameInWork,options);
				Assert.assertFalse(bVal);
			}
			else{
				log.info("Not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean InWorkUpdate_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameInWork);
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
				Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in InWorkUpdate_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean underReviewReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameUnderReview);
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");

				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameUnderReview,options);
				Assert.assertFalse(bVal);
			}
			else{
				log.info("Not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean underReviewUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameUnderReview);
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
				Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean releasedReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameReleased);
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");

				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameReleased,options);
				Assert.assertFalse(bVal);
			}
			else
				log.info("Not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean releasedUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameReleased);
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
				Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean cancelledReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameCancelled);
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");

				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameCancelled,options);
				Assert.assertFalse(bVal);
			}
			else
				log.info("Not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean cancelledUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameCancelled);
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
				Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean rejectedReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameRejected);
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");

				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameRejected,options);
				Assert.assertFalse(bVal);
			}
			else
				log.info("Not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean rejectedUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameRejected);
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
				Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean readyForReviewReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameReadyforReview);
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");

				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameReadyforReview,options);
				Assert.assertFalse(bVal);
			}
			else
				log.info("Not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in readyForReviewReadView()", e);
			return false;
		}
		return true;
	}

	public static boolean readyForReviewUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, BOMnameReadyforReview);
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
				Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this readyForReviewUpdate is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in readyForReviewUpdate()", e);
			return false;
		}
		return true;
	}

	public static Boolean AddSupplier(String[] data) throws Exception{
		try{
		//	SeleniumDriver.driver.switchTo().defaultContent();
		//	SeleniumDriver.driver.switchTo().frame("contentframe");	
			//Click on sourcing tab
			CommonFunctions.clickButtonOrLink(sourcingTab, "Tab", "Sourcing");
			CommonFunctions.selectFromDropDownByVisibleText(meterialSupplierAction, "Add Suppliers");
			Set set = driver.getWindowHandles();
			Iterator iter = set.iterator();
			String parent = (java.lang.String) iter.next();
			String child = (java.lang.String) iter.next();
			driver.switchTo().window(child);
			CommonFunctions.clickButtonOrLink(SourcingConfig.search, "Search For Supplier");
			//Click on show All
			CommonFunctions.clickButtonOrLink(supplierShowAll, "link", "Show All");
			//Select check box
			CommonFunctions.selectCheckbox(By.xpath("//a[text()='"+data[26]+"']/preceding::input[1]"));
			//Click on Select
			CommonFunctions.clickButtonOrLink(selectBtn, "btn", "Select");
			driver.switchTo().window(parent);
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in AddSupplier()", e);
			return false;
		}
		return true;
	}

	public static Boolean selectSupplier(String a,List<WebElement> b,String[] data) throws Exception{
		try{
			for (WebElement option : b) {
				System.out.println("b: "+option.getText());
				System.out.println("a: "+a);
				if (option.getText().trim().contains(a.trim())) {
					CommonFunctions.selectCheckbox(By.xpath("//a[text()='"+data[26]+"']/preceding::input[1]"));
					return true;
				}
			}

		}catch(Exception e){
			log.error("Exception in selectSupplier()", e);
			return false;
		}
		return true;
	}

	public static String Add_Color(String[] data) throws Exception{
		try{
			//Click on Color
//			CommonFunctions.clickButtonOrLink(colorLink, "link", "Color");
//			CommonFunctions.selectFromDropDownByVisibleText(selectMeterialColor, "Add Multiple Colors");
//			//Click on Search
//			CommonFunctions.clickButtonOrLink(btnSearch, "Btn", "Search");
		//	driver.switchTo().frame("divFrameT1127");
			
			for(int i=2;i<=3;i++)
			{
				System.out.println(By.xpath("//div[@id='chooserResultsDiv']/table/tbody/tr[5]/td/div[3]/table/tbody/tr["+i+"]/td/input"));
				CommonFunctions.selectCheckbox(By.xpath("//div[@id='chooserResultsDiv']/table/tbody/tr[5]/td/div[3]/table/tbody/tr["+i+"]/td/input"));
			}
			//Click on Select
			CommonFunctions.clickButtonOrLink(selectBtn, "btn", "Select");
			//Click on Create
			CommonFunctions.clickButtonOrLink(createtBtn, "Btn", "Create");
			//Close frame
			CommonFunctions.clickButtonOrLink(colorCloseIcon, "icon", "Cross");
			SeleniumDriver.driver.switchTo().defaultContent();
			SeleniumDriver.driver.switchTo().frame("contentframe");	
		}catch(Exception e){
			log.error("Exception in CreateColorway()", e);
		}
		return Colorway.colorWayName;
	}

	//	//This funcion is to select Update Lifecycle State	
	public static String changeBOMStatus() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Released");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeBOMStatus()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusUnderReview() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Under Review");
			}
			//			else if(valULCS.contains("Under Review")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			//			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Under Review");
			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Under Review");
			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Under Review");
			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Under Review");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeBOMStatus()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusReleased() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Released");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			//			else if(valULCS.contains("Released")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Released");
			//			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Released");
			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Released");
			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Released");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeStatusReleased()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusCancelled() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Canceled");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			}
			//			else if(valULCS.contains("Canceled")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			//			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeStatusCancelled()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusRejected() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Rejected");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			}
			//			else if(valULCS.contains("Rejected")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			//			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeStatusRejected()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusReadyForReview() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Ready For Review");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			}
			//			else if(valULCS.contains("Ready For Review")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			//			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeStatusReadyForReview()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatus(String[] data) throws Exception{
		try{
			valULCS = new Select(driver.findElement(Product.Editable_UpdateLifecycleState)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState,"Complete");
			}
			else if(valULCS.contains("Complete")){
				CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState, "In Work");
			}
			valULCSAfterChange = new Select(driver.findElement(Product.Editable_UpdateLifecycleState)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in Season_selectUpdateLifecycleState()", e);
		}
		return valULCSAfterChange;
	}

	@AfterMethod
	public void reporterdataSetResult(){
		if(skip)
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "SKIP");
		else if(fail){
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "FAIL");
			isTestPass=false;
		}
		else
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "PASS");
		skip=false;
		fail=false;
	}
	@BeforeTest
	public void checkTestcaseSkip() throws Exception{

		if(!Utility.isCaseRunnable(suiteSecurityXls, this.getClass().getSimpleName())){
			log.debug("Skipping "+this.getClass().getSimpleName()+" as runmode is set to no");
			throw new SkipException("Skipping "+this.getClass().getSimpleName()+" as runmode is set to no");
		}
		runmodes=Utility.getDataSetRunmodeTest(suiteSecurityXls, this.getClass().getSimpleName());
	}
	@AfterTest
	public void reportTestcaseResult(){
		if(isTestPass){
			Utility.dataSetResult(suiteSecurityXls,"Testcases", Utility.getRowNum(suiteSecurityXls, this.getClass().getSimpleName()),"PASS");
		}else
			Utility.dataSetResult(suiteSecurityXls,"Testcases", Utility.getRowNum(suiteSecurityXls, this.getClass().getSimpleName()),"FAIL");

	}

	@DataProvider
	public Object[][] testDataTest(){
		return Utility.getData(suiteSecurityXls, this.getClass().getSimpleName());
	}

}
