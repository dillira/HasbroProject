package com.hasbro.security;
/**
 * @author Anjali Gupta
 *Prerequisite :
 *1. Product should be created and added in column 5
 *2. Colorway should be created and added in column 6 
 */
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.SkipException;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.hasbro.PC.PartMgmtFunctional;

import base.SeleniumDriver;
import util.CommonFunctions;
import util.CommonProjectFunctions;
import util.ErrorUtil;
import util.Utility;



public class InternalBOMSoftG extends TestsuiteBase{

	String runmodes[]=null;
	static int count=-1;
	static boolean skip=false;
	static boolean fail=false;
	static boolean isTestPass=true;
	static WebDriverWait wait=null;
	public static By addNewBOMTab= By.xpath("//a[contains(text(),'Add New BOM')]");
	//	public static By BOMDetails= By.xpath("//li[@id='DETAILS_PAGETab']/a");
	public static By initializeBOM= By.xpath("//a[contains(text(),'Initialize BOM')]");
	public static By headingCreateBOM= By.xpath("//td[contains(text(),'Create BOM')]");
	public static By name= By.xpath("//td[contains(text(),'*Name')]//following::input[1]");
	public static By ROname= By.xpath("//td[contains(text(),'BOM Identification')]//following::td[2]");
	public static By colorwayName= By.xpath("//td[contains(text(),'Colorway Name')]//following::select[1]");
	public static By colorway= By.xpath("//td[contains(text(),'Colorway')]//following::select[1]");
	public static By wave= By.xpath("//td[contains(text(),'Wave')]//following::select[1]");
	public static By currency= By.xpath("//td[contains(text(),'Currency')]//following::select[1]");

	public static By selectSource= By.id("sourcingConfigId");
	public static By selectExistingSpec= By.id("existingSetList");

	public static By selectSpecification= By.id("contextSpecId");
	public static By compOrLoca= By.id("r1_partName");
	public static By checmicalDesc= By.id("r2_partName");

	public static By quantity= By.id("r1_quantity");
	public static By meterial= By.id("r1_materialDescription");
	public static By meterialRow2= By.id("r2_materialDescription");

	public static By plasticDescription= By.xpath("//table[contains(@id,'TBLT')]/tbody/tr[3]/td[1]");
	public static By plasticMeterialDesc= By.xpath(".//table[contains(@id,'TBLT')]/tbody/tr[3]/td[3]");

	public static By chemicalsDescription= By.xpath("//table[contains(@id,'TBLT')]/tbody/tr[5]/td[1]");
	public static By chemicalsMeterialDesc= By.xpath(".//table[contains(@id,'TBLT')]/tbody/tr[5]/td[3]");


	public static By headingEditBOM= By.xpath("//td[contains(text(),'Edit BOM')]");
	public static By inputCompOrLoca= By.xpath("//div[@id='partNameSourceDiv']/input");
	public static By inputquantity= By.xpath("//div[@id='quantitySourceDiv']/input");
	public static By inputMaterial= By.xpath("//div[@id='materialDescriptionSourceDiv']/textarea");

	public static By btnSaveAndCheckIn= By.xpath("//a[text()='Save and Check In']");
	public static By headerAttributes= By.xpath("//div[@id='genDetails_plus']/a[2]");
	public static By headerAttributesBtn= By.xpath("//a[contains(text(),'Header Attributes')]");

	public static By BOMId= By.id("bomId");
	public static By BOMTypeId= By.id("bomTypeId");
	public static By headerAttributesPlus= By.xpath("//div[@id='genDetails_plus']/a[1]/img");
	public static By headerAttributeExpand= By.xpath("//div[@id='genDetails_plus']/a[1]/img[@src='/Windchill/netmarkets/images/expand_tree.png']");
	public static By headerAttributeCollapse= By.xpath("//div[@id='genDetails_plus']/a[1]/img[@src='/Windchill/netmarkets/images/collapse_tree.png']");
	public static By BOMAction= By.xpath("//div[@id='UPDATE_BTNS']//a[contains(text(),'Actions')]");
	public static By checkedOutByYou= By.xpath("//td[contains(text(),'Checked Out by: You')]");
	public static By billOfMaterials= By.xpath("//select[@id='bomId']/option[@selected='']");
	public static By RO_UpdateLifecycleState = By.xpath("//div[contains(@id,'systemInformationOR')]//td[contains(text(),'Lifecycle State')]//following::td[1]");
	public static By updateBtn= By.xpath("//a[contains(text(),'Update')]");
	public static By RO_compLoc= By.xpath("//table[@class='TABLE_OUTLINE']/tbody/tr[3]/td[1]");
	public static By RO_quantity= By.xpath("//table[@class='TABLE_OUTLINE']/tbody/tr[3]/td[2]");
	public static By setState= By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Set State')]");
	public static By actionDD= By.id("prodseasonActions");
	public static By manager   = By.xpath("//td[contains(text(),'Manager')]//following::select[1]");
	public static By sourcingLead   = By.xpath("//td[contains(text(),'Sourcing Lead')]//following::select[1]");
	public static By sourcingHead   = By.xpath("//td[contains(text(),'Sourcing Head')]//following::select[1]");
	public static By management   = By.xpath("//td[contains(text(),'Management')]//following::select[1]");
	public static By BOMDetails  = By.xpath("//a[text()='BOM Details']");

	public static By BOMIdentification  = By.xpath("//td[contains(text(),'BOM Identification')]");
	public static By BOMCostSummary  = By.xpath("//td[contains(text(),'BOM Cost Summary')]");
	public static By BOMComments  = By.xpath("//td[contains(text(),'Comments')]");
	public static By EnterComments  = By.xpath("//a[text()='Enter Comment']");
	public static By PostNewComment  = By.xpath("//td[contains(text(),'Post New Comment')]//following::textarea[1]");
	public static By post  = By.xpath("//a[text()='Post']");
	public static By descHeading  = By.xpath("//td[@class='TABLESUBHEADER' and text()='Description']");
	public static By plastics  = By.xpath("//a[contains(text(),'Plastics')]");

	public static By BOMStatus  = By.xpath("//td[contains(text(),'BOM Status')]//following::select[1]");

	public static By ROComment  = By.xpath("//a[contains(text(),'User')]//following::td[1]");

	public static By componentPlus  = By.xpath("//a[text()='Components']/preceding-sibling::a");
	public static By removeLink  = By.xpath("//a[text()='Remove']");
	public static By ROWave  = By.xpath("//td[contains(text(),'Wave')]//following::td[1]");
	
	public static By plasticClear  = By.xpath("//div[@id='hbPlasticsTabEditorTableDiv']//a[contains(text(),'Clear')]");
	public static By chemicalClear  = By.xpath("//div[@id='hbChemicalsTabEditorTableDiv']//a[contains(text(),'Clear')]");

	public static By viewBtn= By.xpath("//img[@src='/Windchill/netmarkets/images/view.png']");
	public static By NoneBtn= By.xpath("//a[contains(text(),'None')]");

	int y=0;
	String loginVal;
	Boolean flaglogin=false;
	static String valULCS;
	static String valULCSAfterChange;
	public static String BOMname;
	static String strBillOfMaterials;
	static Boolean bCheckedOut=false;
	static Actions action;
	public static String strRO_UpdateLifecycleState;
	static String strUpdate;
	static String strRO_quantity;
	static String strSpec;
	static String  strSource;
	static String strCW;
	static String strBOMDetail;
	static String BOMnameInWork;
	static String BOMnameUnderReview;
	static String BOMnameReleased;
	static String BOMnameCancelled;
	static String BOMnameRejected;
	static String BOMnameReadyforReview;
	static String strBOMInWork;
	static String strBOM;
	static String strBOMIW;
	static String strBOMUR;
	static String strBOMR;
	static String strBOMC;
	static String strBOMRj;
	static String strBOMRFR;
	static String BOMnameInWork1;

	@Test(dataProvider="testDataTest")
	public void tcBOM(String[] data) throws Exception{
		try{
			count++;
			System.out.println(runmodes[count]);
			if(!runmodes[count].equalsIgnoreCase("y")){
				skip=true;
				log.debug(this.getClass().getSimpleName()+" Testdata row number "+(count+1)+" is skippped as runmode is set to N");
				throw new SkipException(this.getClass().getSimpleName()+" Testdata row number "+(count+1)+" is skipped as runmode is set to N");
			}
			log.debug("Inside testcase for Security Internal and Soft good BOM");
			System.out.println("col0 :" + data[0]);
			System.out.println("col1 :" + data[1]);
			System.out.println("attribute group :" + data[2]);
			System.out.println("verification :" + data[3]);
			if(flaglogin==true)
			{
				if(!loginVal.equalsIgnoreCase(data[0])){
					y=0;
					flaglogin=false;
					CommonProjectFunctions.logOut();
					driver.quit();
				}
			}
			if(runmodes[count].equalsIgnoreCase("y")){
				if(y==0){
					openBrowser();
					launchApp(data[0],data[1]);
					y++;
					System.out.println("y: "+y);
					loginVal=data[0];
					flaglogin=true;
				}
			}

			//Create Product from LineSheet
			if(data[3].equalsIgnoreCase("Create"))
			{ Create_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateInWork"))
			{ CreateInWork_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateUnderReview"))
			{ CreateUnderReview_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateReleased"))
			{ CreateReleased_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateCancelled"))
			{ CreateCancelled_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateRejected"))
			{ CreateRejected_BOM(data); }
			if(data[3].equalsIgnoreCase("CreateReadyforReview"))
			{ CreateReadyforReview_BOM(data); }


			if(data[3].equalsIgnoreCase("readView"))
			{ readView_BOM(data); }
			if(data[3].equalsIgnoreCase("update"))
			{ update_BOM(data); }

			//Delete Product
			if(data[3].equalsIgnoreCase("Delete"))
			{ delete_BOM(data); }

			if(data[3].equalsIgnoreCase("inWorkReadView"))
			{ InWorkreadView_BOM(data); }
			if(data[3].equalsIgnoreCase("inWorkUpdate"))
			{ InWorkUpdate_BOM(data); }

			if(data[3].equalsIgnoreCase("UnderReviewReadView"))
			{ underReviewReadView(data); }
			if(data[3].equalsIgnoreCase("UnderReviewUpdate"))
			{ underReviewUpdate(data); }

			if(data[3].equalsIgnoreCase("ReleasedReadView"))
			{ releasedReadView(data); }
			if(data[3].equalsIgnoreCase("ReleasedUpdate"))
			{ releasedUpdate(data); }

			if(data[3].equalsIgnoreCase("CancelledReadView"))
			{ cancelledReadView(data); }
			if(data[3].equalsIgnoreCase("CancelledUpdate"))
			{ cancelledUpdate(data); }

			if(data[3].equalsIgnoreCase("RejectedReadView"))
			{ rejectedReadView(data); }
			if(data[3].equalsIgnoreCase("RejectedUpdate"))
			{ rejectedUpdate(data);   }

			if(data[3].equalsIgnoreCase("ReadyforReviewReadView"))
			{ readyForReviewReadView(data); }
			if(data[3].equalsIgnoreCase("ReadyforReviewUpdate"))
			{ readyForReviewUpdate(data);   }

			if(data[3].equalsIgnoreCase("BOMIdentificationReadView"))
			{ verifyBOMIdentificationReadView(data); }
			if(data[3].equalsIgnoreCase("BOMIdentificationUpdate"))
			{ verifyBOMIdentificationUpdate(data); }

			//Read view verification
			if(data[3].equalsIgnoreCase("GeneralAttributesRead_View"))
			{  verifyGeneralAttributesReadView(data); }
			//Update Verification
			if(data[3].equalsIgnoreCase("GeneralAttributesUpdate"))
			{  verifyGeneralAttributesUpdate(data); }

			if(data[3].equalsIgnoreCase("BOMCostingSummaryReadView"))
			{ verifyBOMCostingSummaryReadView(data); }
			if(data[3].equalsIgnoreCase("BOMCostingSummaryUpdate"))
			{ verifyBOMCostingSummaryUpdate(data); }

			if(data[3].equalsIgnoreCase("BOMCommentsRead"))
			{ verifyBOMCommentsRead(data); }
			if(data[3].equalsIgnoreCase("BOMCommentsUpdate"))
			{ verifyBOMCommentsUpdate(data); }

			if(data[3].equalsIgnoreCase("BOMSectionsRead"))
			{ verifyBOMSectionsRead(data); }
			if(data[3].equalsIgnoreCase("BOMSectionsUpdate"))
			{ verifyBOMSectionsUpdate(data); }

		}catch(Throwable t){
			fail=true;
			ErrorUtil.addVerificationFailure(t);
		}	
	}

	//Prerequisite: Specification should be created.previous specifications should not be available
	public static String[] Create_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);

			strSource=AddSource(data);
			strSpec=AddSpecification(data);
			strCW=AddColorway(data);

			CommonProjectFunctions.clickMaterialsTab();

			//	Boolean strAddNewBOMTab =driver.findElement(addNewBOMTab).isDisplayed();
			if(data[3].contains("Create")&& data[4].equalsIgnoreCase("Yes")){

				//Click Add New BOM tab
				CommonFunctions.clickButtonOrLink(addNewBOMTab, "btn", "Add New BOM tab");
				//Enter BOM Type
				//CommonFunctions.enterTextInTextbox(By.xpath("//select[@id='bomTypeId']/option[contains(text(),'"+data[2]+"')]"), data[2]);
				CommonFunctions.enterTextInTextbox(BOMTypeId, data[2]);

				//Click Initialize BOM
				CommonFunctions.clickButtonOrLink(initializeBOM,"btn", "Initialize BOM");
				BOMname="InWork"+CommonFunctions.getRandomString(4);
				//Create BOM page
				BOMnameInWork = fillCreateBOM(data);
				//Switch to mainframe
				driver.switchTo().frame("mainFrame");
				//	wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(headingEditBOM));
				//Component or Location
				action = new Actions(driver);
				action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
				//Quanity
				action.moveToElement(driver.findElement(quantity)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputquantity, data[10]);
				//Click button btnSaveAndCheckIn
				CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
				CommonFunctions.handleAlertPopUp();
				//Switch to contentFrame
				driver.switchTo().frame("contentframe");

				CommonFunctions.waitForVisibilityOfElement(headerAttributes);
				//	String strBOM=driver.findElement(BOMId).getText();
				strBOMIW=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();
				if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal") || (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
				{
					strBOM=strBOMIW.substring(6, 16);
					String strHeader=driver.findElement(headerAttributes).getText();
					System.out.println(strBOM.trim());
					System.out.println(BOMnameInWork);
					Assert.assertEquals(strHeader,"Header Attributes");
					Assert.assertEquals(strBOM.trim(),BOMnameInWork);
				}
			}
			else if(data[3].contains("Create")&& data[4].equalsIgnoreCase("No")){
				//	Assert.assertFalse(strAddNewBOMTab);
				Assert.assertEquals(driver.findElements(addNewBOMTab).size(), 0, "BOM can not create"); 
			}
			else{
				log.info("Create is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in Create_BOM()", e);
			//		return "";
		}
		return new String[] {strBOMIW, BOMnameInWork};
		//return BOMnameInWork;
	}

	public static String[] CreateInWork_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);

			strSource=AddSource(data);
			strSpec=AddSpecification(data);
			strCW=AddColorway(data);

			CommonProjectFunctions.clickMaterialsTab();

			//	Boolean strAddNewBOMTab =driver.findElement(addNewBOMTab).isDisplayed();
			//Click Add New BOM tab
			CommonFunctions.clickButtonOrLink(addNewBOMTab, "btn", "Add New BOM tab");
			//Enter BOM Type
			//CommonFunctions.enterTextInTextbox(By.xpath("//select[@id='bomTypeId']/option[contains(text(),'"+data[2]+"')]"), data[2]);
			CommonFunctions.enterTextInTextbox(BOMTypeId, data[2]);

			//Click Initialize BOM
			CommonFunctions.clickButtonOrLink(initializeBOM,"btn", "Initialize BOM");
			BOMname="InWork"+CommonFunctions.getRandomString(4);
			//Create BOM page
			BOMnameInWork1 = fillCreateBOM(data);
			//Switch to mainframe
			driver.switchTo().frame("mainFrame");
			//	wait.withTimeout(10, TimeUnit.SECONDS).until(ExpectedConditions.visibilityOfElementLocated(headingEditBOM));
			//Component or Location
			action = new Actions(driver);
			action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
			//Quanity
			action.moveToElement(driver.findElement(quantity)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputquantity, data[10]);
			//Click button btnSaveAndCheckIn
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");

			CommonFunctions.waitForVisibilityOfElement(headerAttributes);
			//	String strBOM=driver.findElement(BOMId).getText();
			strBOMInWork=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();
			if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods"))){
				strBOM=strBOMIW.substring(6, 16);
				String strHeader=driver.findElement(headerAttributes).getText();
				System.out.println(strBOM.trim());
				System.out.println(BOMnameInWork);
				Assert.assertEquals(strHeader,"Header Attributes");
				Assert.assertEquals(strBOM.trim(),BOMnameInWork);
			}
			log.info("InWork status BOM is: "+strBOMInWork);

		}catch(Exception e){
			fail=true;
			log.error("Exception in CreateUnderReview_BOM()", e);
			//	return "";
		}
		return new String[] {strBOMInWork, BOMnameInWork1};
		//return BOMnameUnderReview;
	}

	//Prerequsite : Product must be created and added in excel sheet
	public static String[] CreateUnderReview_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);

			strSource=AddSource(data);
			strSpec=AddSpecification(data);
			strCW=AddColorway(data);

			CommonProjectFunctions.clickMaterialsTab();
			//Click Add New BOM tab
			CommonFunctions.clickButtonOrLink(addNewBOMTab, "btn", "Add New BOM tab");
			//Enter BOM Type
			CommonFunctions.enterTextInTextbox(BOMTypeId, data[2]);

			//Click Initialize BOM
			CommonFunctions.clickButtonOrLink(initializeBOM,"btn", "Initialize BOM");
			//Create BOM page
			BOMname="UnderReview"+CommonFunctions.getRandomString(4);
			BOMnameUnderReview = fillCreateBOM(data);
			//Switch to mainframe
			driver.switchTo().frame("mainFrame");
			//Component or Location
			action = new Actions(driver);
			action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
			//Quanity
			action.moveToElement(driver.findElement(quantity)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputquantity, data[10]);
			//Click button btnSaveAndCheckIn
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");

			strBOMUR=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();
			if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods"))){
				strBOM=strBOMUR.substring(6, 21);
				System.out.println(strBOM.trim());
				System.out.println(BOMnameUnderReview);
				Assert.assertEquals(strBOM.trim(),BOMnameUnderReview);
			}
			CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
			WebDriverWait wait = new WebDriverWait(driver,10);
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
			//	driver.switchTo().frame("mainFrame");
			CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");
			if (data[3].contains("CreateUnderReview")){
				valULCSAfterChange=changeStatusUnderReview();
			}

			//Click 'Save and Check In'
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");
			log.info("UnderReview status BOM is: "+strBOMUR);
		}catch(Exception e){
			fail=true;
			log.error("Exception in CreateUnderReview_BOM()", e);
			//	return "";
		}
		return new String[] {strBOMUR, BOMnameUnderReview};
		//return BOMnameUnderReview;
	}

	public static String[] CreateReleased_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);

			strSource=AddSource(data);
			strSpec=AddSpecification(data);
			strCW=AddColorway(data);

			CommonProjectFunctions.clickMaterialsTab();
			//Click Add New BOM tab
			CommonFunctions.clickButtonOrLink(addNewBOMTab, "btn", "Add New BOM tab");
			//Enter BOM Type
			CommonFunctions.enterTextInTextbox(BOMTypeId, data[2]);

			//Click Initialize BOM
			CommonFunctions.clickButtonOrLink(initializeBOM,"btn", "Initialize BOM");
			BOMname="Released"+CommonFunctions.getRandomString(4);
			//Create BOM page
			BOMnameReleased = fillCreateBOM(data);
			//Switch to mainframe
			driver.switchTo().frame("mainFrame");
			//Component or Location
			action = new Actions(driver);
			action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
			//Quanity
			action.moveToElement(driver.findElement(quantity)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputquantity, data[10]);
			//Click button btnSaveAndCheckIn
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");

			strBOMR=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();
			if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods"))){
				strBOM=strBOMR.substring(6, 18);
				System.out.println(strBOM.trim());
				System.out.println(BOMnameReleased);
				Assert.assertEquals(strBOM.trim(),BOMnameReleased);
			}
			CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
			WebDriverWait wait = new WebDriverWait(driver,10);
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
			//	driver.switchTo().frame("mainFrame");
			CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

			if(data[3].contains("CreateReleased")){
				valULCSAfterChange=changeStatusReleased();
			}

			//Click 'Save and Check In'
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");
			log.info("Released status BOM is: "+strBOMR);
		}catch(Exception e){
			fail=true;
			log.error("Exception in CreateReleased_BOM()", e);
			//	return [];
		}
		return new String[] {strBOMR, BOMnameReleased};
		//return BOMnameReleased;
	}

	public static String[] CreateCancelled_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);

			strSource=AddSource(data);
			strSpec=AddSpecification(data);
			strCW=AddColorway(data);

			CommonProjectFunctions.clickMaterialsTab();
			//Click Add New BOM tab
			CommonFunctions.clickButtonOrLink(addNewBOMTab, "btn", "Add New BOM tab");
			//Enter BOM Type
			CommonFunctions.enterTextInTextbox(BOMTypeId, data[2]);

			//Click Initialize BOM
			CommonFunctions.clickButtonOrLink(initializeBOM,"btn", "Initialize BOM");
			BOMname="Canceled"+CommonFunctions.getRandomString(4);
			//Create BOM page
			BOMnameCancelled = fillCreateBOM(data);
			//Switch to mainframe
			driver.switchTo().frame("mainFrame");
			//Component or Location
			action = new Actions(driver);
			action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
			//Quanity
			action.moveToElement(driver.findElement(quantity)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputquantity, data[10]);
			//Click button btnSaveAndCheckIn
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");

			strBOMC=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();

			if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods"))){
				strBOM=strBOMC.substring(6, 18);
				System.out.println(strBOM.trim());
				System.out.println(BOMnameCancelled);
				Assert.assertEquals(strBOM.trim(),BOMnameCancelled);
			}
			CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
			WebDriverWait wait = new WebDriverWait(driver,10);
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
			//	driver.switchTo().frame("mainFrame");

			CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

			if(data[3].contains("CreateCancelled")){
				valULCSAfterChange=changeStatusCancelled();
			}

			//Click 'Save and Check In'
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");
			log.info("Cancelled status BOM is: "+strBOMC);
		}catch(Exception e){
			fail=true;
			log.error("Exception in CreateCancelled_BOM()", e);
			//		return "";
		}
		return new String[] {strBOMC, BOMnameCancelled};
		//	return BOMnameCancelled;
	}

	public static String[] CreateRejected_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);

			strSource=AddSource(data);
			strSpec=AddSpecification(data);
			strCW=AddColorway(data);

			CommonProjectFunctions.clickMaterialsTab();
			//Click Add New BOM tab
			CommonFunctions.clickButtonOrLink(addNewBOMTab, "btn", "Add New BOM tab");
			//Enter BOM Type
			CommonFunctions.enterTextInTextbox(BOMTypeId, data[2]);

			//Click Initialize BOM
			CommonFunctions.clickButtonOrLink(initializeBOM,"btn", "Initialize BOM");
			BOMname="Rejected"+CommonFunctions.getRandomString(4);
			//Create BOM page
			BOMnameRejected = fillCreateBOM(data);
			//Switch to mainframe
			driver.switchTo().frame("mainFrame");
			//Component or Location
			action = new Actions(driver);
			action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
			//Quanity
			action.moveToElement(driver.findElement(quantity)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputquantity, data[10]);
			//Click button btnSaveAndCheckIn
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");

			strBOMRj=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();

			if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods"))){
				strBOM=strBOMRj.substring(6, 18);
				System.out.println(strBOM.trim());
				System.out.println(BOMnameRejected);
				Assert.assertEquals(strBOM.trim(),BOMnameRejected);
			}
			CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
			WebDriverWait wait = new WebDriverWait(driver,10);
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
			//	driver.switchTo().frame("mainFrame");
			CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

			if(data[3].contains("CreateRejected")){
				valULCSAfterChange=changeStatusRejected();
			}
			//Click 'Save and Check In'
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");
			log.info("Rejected status BOM is: "+strBOMRj);
		}catch(Exception e){
			fail=true;
			log.error("Exception in CreateRejected_BOM()", e);
			//	return "";
		}
		return new String[] {strBOMRj, BOMnameRejected};
		//return BOMnameRejected;
	}

	public static String[] CreateReadyforReview_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);

			strSource=AddSource(data);
			strSpec=AddSpecification(data);
			strCW=AddColorway(data);

			CommonProjectFunctions.clickMaterialsTab();
			//Click Add New BOM tab
			CommonFunctions.clickButtonOrLink(addNewBOMTab, "btn", "Add New BOM tab");
			//Enter BOM Type
			CommonFunctions.enterTextInTextbox(BOMTypeId, data[2]);

			//Click Initialize BOM
			CommonFunctions.clickButtonOrLink(initializeBOM,"btn", "Initialize BOM");
			BOMname="ReadyforReview"+CommonFunctions.getRandomString(4);
			//Create BOM page
			BOMnameReadyforReview = fillCreateBOM(data);
			//Switch to mainframe
			driver.switchTo().frame("mainFrame");
			//Component or Location
			action = new Actions(driver);
			action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
			//Quanity
			action.moveToElement(driver.findElement(quantity)).doubleClick().perform();
			CommonFunctions.enterTextInTextbox(inputquantity, data[10]);
			//Click button btnSaveAndCheckIn
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");

			strBOMRFR=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();
			if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods"))){
				strBOM=strBOMRFR.substring(6, 13);
				System.out.println(strBOM.trim());
				System.out.println(BOMnameReadyforReview);
				Assert.assertEquals(strBOM.trim(),BOMnameReadyforReview);
			}
			CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
			WebDriverWait wait = new WebDriverWait(driver,10);
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
			//		driver.switchTo().frame("mainFrame");
			CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

			//	if(data[3].contains("CreateRejected")){
			valULCSAfterChange=changeStatusReadyForReview();
			//	}
			//Click 'Save and Check In'
			CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
			CommonFunctions.handleAlertPopUp();
			//Switch to contentFrame
			driver.switchTo().frame("contentframe");
			log.info("Rejected status BOM is: "+strBOMRFR);
		}catch(Exception e){
			fail=true;
			log.error("Exception in CreateRejected_BOM()", e);
			//		return "";
		}
		return new String[] {strBOMRFR, BOMnameReadyforReview};
		//	return BOMnameReadyforReview;
	}



	public static String fillCreateBOM(String[] data) throws Exception{
		try{
			CommonFunctions.waitForVisibilityOfElement(headingCreateBOM);
			if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal")) || (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
				CommonFunctions.enterTextInTextbox(name,BOMname);
			//Select colorway
			CommonFunctions.selectFromDropDownByIndex(colorway, 1);
			//Select Wave
			CommonFunctions.selectFromDropDownByVisibleText(wave, data[11]);
			//Select Currency
			CommonFunctions.selectFromDropDownByVisibleText(currency, data[7]);
			//click on Create
			CommonFunctions.clickButtonOrLink(Product.createBtn, "btn", "Create");
		}catch(Exception e){
			fail=true;
			log.error("Exception in fillCreateBOM()", e);
			return "";
		}
		return BOMname;
	}

	public static String AddSource(String[] data) throws Exception{
		try{
			//Add Source
			Select dropDownSource = new Select(SeleniumDriver.driver.findElement(selectSource));
			List<WebElement> elementCountSource = dropDownSource.getOptions();
			int countSource =elementCountSource.size();
			//log.info("Number of supplier: " + countSource);
			if(countSource>2)
			{
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				strSource=new Select(driver.findElement(selectSource)).getFirstSelectedOption().getText();
			}
			else
			{
				AddSourcingConfiguration(data);
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				strSource=new Select(driver.findElement(selectSource)).getFirstSelectedOption().getText();
			}
			log.info("Source is: "+strSource);
		}catch(Exception e){
			fail=true;
			log.error("Exception in fillCreateBOM()", e);
			return "";
		}
		return strSource;
	}

	public static String AddSpecification(String[] data) throws Exception{
		try{
			//Add Specification
			Select dropDownSpec = new Select(SeleniumDriver.driver.findElement(selectSpecification));
			List<WebElement> elementCount = dropDownSpec.getOptions();
			int count =elementCount.size();
			//	int count =SeleniumDriver.driver.findElements(selectSpecification).size();
			if(count>=2)
			{
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				strSpec=new Select(driver.findElement(selectSpecification)).getFirstSelectedOption().getText();
			}
			else
			{
				strSpec= CommonProjectFunctions.Create_Specifications(data[11],data[12]);
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				strSpec=new Select(driver.findElement(selectSpecification)).getFirstSelectedOption().getText();
			}
			log.info("Specification is: "+strSpec);
		}catch(Exception e){
			fail=true;
			log.error("Exception in fillCreateBOM()", e);
			return "";
		}
		return strSpec;
	}

	public static String AddColorway(String[] data) throws Exception{
		try{
			//Add colorway
			Select dropDownCW = new Select(SeleniumDriver.driver.findElement(colorwayName));
			List<WebElement> elementCountCW = dropDownCW.getOptions();
			int countCW =elementCountCW.size();
			//	int count =SeleniumDriver.driver.findElements(selectSpecification).size();
			if(countCW>=2)
			{
				CommonFunctions.selectFromDropDownByIndex(colorwayName, 1);
				strCW=new Select(driver.findElement(colorwayName)).getFirstSelectedOption().getText();
			}
			else
			{
				strCW= Create_Colorway(data);
			}
			log.info("Colorway is: "+strCW);
		}catch(Exception e){
			fail=true;
			log.error("Exception in AddColorway()", e);
			return "";
		}
		return strCW;
	}

	public static boolean readView_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
			CommonFunctions.handleAlertPopUp();
			if(data[3].contains("ReadView")&& data[4].equalsIgnoreCase("Yes")){
				Assert.assertEquals(strBOMDetail, "BOM Details");
				//Testcase is yello parked hence not validated,May be it will removed
			}
			else if(data[3].contains("ReadView")&& data[4].equalsIgnoreCase("No")){
				Assert.assertEquals(driver.findElements(BOMDetails).size(), 0, "BOM detail tab is not present"); 
			}
			else{
				log.info("Not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean update_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
			CommonFunctions.handleAlertPopUp();
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");
				//CommonFunctions.waitForVisibilityOfElement(headingEditBOM);
				//	driver.switchTo().frame("mainFrame");
				String strEditPage = driver.findElement(headingEditBOM).getText();
				strEditPage=strEditPage.substring(0, 8);
				Assert.assertEquals(strEditPage, "Edit BOM");
				log.info("Edit BOM page is displayed");
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this update_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}


	public static boolean delete_BOM(String[] data) throws Exception{
		try{
			if(data[3].contains("Delete")&& data[4].equalsIgnoreCase("Yes")){
			CreateInWork_BOM(data); 
			//	CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			//Click on '+' sign of component
			CommonFunctions.clickButtonOrLink(componentPlus, "btn", "Component plus sign");
			//Click on Action
			CommonFunctions.clickButtonOrLink(By.xpath("//a[contains(text(),'"+strBOMInWork+"')]/preceding::td[2]/a"), "dropdown", "Action");
			CommonFunctions.waitForVisibilityOfElement(removeLink);
			//Click on Remove
			CommonFunctions.clickButtonOrLink(removeLink, "link", "Remove");
			CommonFunctions.handleAlertPopUp();

			CommonProjectFunctions.clickMaterialsTab();
			CommonFunctions.handleAlertPopUp();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 0);
			CommonFunctions.handleAlertPopUp();
			//		Select Specification
			//	CommonFunctions.selectFromDropDownByIndex(selectSpecification, 0);
			//	CommonFunctions.handleAlertPopUp();
			//Select BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMInWork);
				//Click Check IN
				if(driver.findElements(checkedOutByYou).size()>0){
					CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
					//Check In
					driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Check In')]")).click();
				}
				strBillOfMaterials = driver.findElement(billOfMaterials).getText();
				CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
				//CommonFunctions.clickButtonOrLink(deleteSpec, "option", "Delete Spec");
				driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Delete')]")).click();
				//	Thread.sleep(3000);
				CommonFunctions.waitForVisibilityOfElement(Product.headerDeleteObject);
				//Click on delete button
				CommonFunctions.clickButtonOrLink(Product.deleteButton,"btn", "Delete");
				//		Boolean bAlert = CommonFunctions.AlertPopUpPresent();
				//		Assert.assertTrue(bAlert);
				driver.switchTo().alert().accept(); 
				CommonFunctions.handleAlertPopUp();
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(strBillOfMaterials,options);
				log.info("BOM value after delete is: "+bVal);
				//	dropDownOptionVerificationverifying deleted one is not present in dropdown
				Assert.assertFalse(bVal);
				log.info("BOM has been deleted.Deleted BOM is: "+strBillOfMaterials);
			}
			else if(data[3].contains("Delete")&& data[4].equalsIgnoreCase("No")){
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();
				CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
				System.out.println(driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Delete')]")).getAttribute("disabled"));
				String bDelete= driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Delete')]")).getAttribute("disabled");
				//	dropDownOptionVerification : verifying deleted one is not present in dropdown
				Assert.assertEquals("true", bDelete);
			}
			else
				log.info("Delete is not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in delete_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean InWorkreadView_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//	strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select In Work BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
				CommonFunctions.handleAlertPopUp();
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");
				
				if(!data[2].equalsIgnoreCase("BOM\\Materials\\Product\\Retail Item\\Soft Goods")){
				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");
				}
				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");
			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameInWork,options);
				Assert.assertFalse(bVal);
			}
			else{
				log.info("Not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean InWorkUpdate_BOM(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
			CommonFunctions.handleAlertPopUp();
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				//	driver.switchTo().frame("mainFrame");
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");
			//	System.out.println(driver.findElements(name).size());
				//Verification
				if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
					Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable");
				else if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Vendor")||data[2].contains("BOM\\Materials\\Product\\Product\\Vendor"))
				{	System.out.println(driver.findElements(ROname).size());
					Assert.assertEquals(driver.findElements(ROname).size(), 1, "BOM Identification Name is derived"); 
				
				}	//Switch to contentFrame
			//	driver.switchTo().frame("contentframe");
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in InWorkUpdate_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean underReviewReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//	strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMUR);
				CommonFunctions.handleAlertPopUp();
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				if(!data[2].equalsIgnoreCase("BOM\\Materials\\Product\\Retail Item\\Soft Goods")){
				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");
				}
				
				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameUnderReview,options);
				Assert.assertFalse(bVal);
			}
			else{
				log.info("Not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean underReviewUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMUR);
			CommonFunctions.handleAlertPopUp();
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				//	driver.switchTo().frame("mainFrame");
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				//Verification
				if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
					Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable");
				else if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Vendor")||data[2].contains("BOM\\Materials\\Product\\Product\\Vendor"))
				{	System.out.println(driver.findElements(ROname).size());
					Assert.assertEquals(driver.findElements(ROname).size(), 1, "BOM Identification Name is derived"); 
				}	
			//	Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
			//	Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
				//Switch to contentFrame
			//	driver.switchTo().frame("contentframe");
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean releasedReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//	strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMR);
				CommonFunctions.handleAlertPopUp();
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				if(!data[2].equalsIgnoreCase("BOM\\Materials\\Product\\Retail Item\\Soft Goods")){
				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");
				}
				
				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameReleased,options);
				Assert.assertFalse(bVal);
			}
			else
				log.info("Not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean releasedUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMR);
			CommonFunctions.handleAlertPopUp();
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				//driver.switchTo().frame("mainFrame");
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");
				System.out.println(driver.findElements(name).size());
				//Verification
				//Verification
				if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
					Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable");
				else if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Vendor")||data[2].contains("BOM\\Materials\\Product\\Product\\Vendor"))
				{	System.out.println(driver.findElements(ROname).size());
					Assert.assertEquals(driver.findElements(ROname).size(), 1, "BOM Identification Name is derived"); 
				}
			//	Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
			//	Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
				//Switch to contentFrame
		//		driver.switchTo().frame("contentframe");
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean cancelledReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//	strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMC);
				CommonFunctions.handleAlertPopUp();
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				if(!data[2].equalsIgnoreCase("BOM\\Materials\\Product\\Retail Item\\Soft Goods")){
				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");
				}
				
				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameCancelled,options);
				Assert.assertFalse(bVal);
			}
			else
				log.info("Not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean cancelledUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMC);
			CommonFunctions.handleAlertPopUp();
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				//	driver.switchTo().frame("mainFrame");
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				//Verification
				if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
					Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable");
				else if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Vendor")||data[2].contains("BOM\\Materials\\Product\\Product\\Vendor"))
				{	System.out.println(driver.findElements(ROname).size());
					Assert.assertEquals(driver.findElements(ROname).size(), 1, "BOM Identification Name is derived"); 
				}
			//	Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
			//	Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
				//Switch to contentFrame
		//		driver.switchTo().frame("contentframe");
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean rejectedReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMRj);
				CommonFunctions.handleAlertPopUp();
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");
				
				if(!data[2].equalsIgnoreCase("BOM\\Materials\\Product\\Retail Item\\Soft Goods")){
				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");
				}
				
				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameRejected,options);
				Assert.assertFalse(bVal);
			}
			else
				log.info("Not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in readView_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean rejectedUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMRj);
			CommonFunctions.handleAlertPopUp();
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				//	driver.switchTo().frame("mainFrame");
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
					Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable");
				else if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Vendor")||data[2].contains("BOM\\Materials\\Product\\Product\\Vendor"))
				{	System.out.println(driver.findElements(ROname).size());
					Assert.assertEquals(driver.findElements(ROname).size(), 1, "BOM Identification Name is derived"); 
				}
			//	Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
			//	Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
				//Switch to contentFrame
		//		driver.switchTo().frame("contentframe");
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this InWorkUpdate_BOM is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in update_BOM()", e);
			return false;
		}
		return true;
	}

	public static boolean readyForReviewReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			strBOMDetail = driver.findElement(BOMDetails).getText();

			if(data[4].equalsIgnoreCase("Yes")){
				//Select Under review BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMRFR);
				CommonFunctions.handleAlertPopUp();
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");

				String BILabel=driver.findElement(BOMIdentification).getText();
				Assert.assertEquals(BILabel.trim(), "BOM Identification");

				String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
				Assert.assertEquals(GALabel, " General Attributes:");

				if(!data[2].equalsIgnoreCase("BOM\\Materials\\Product\\Retail Item\\Soft Goods")){
				String BCSLabel=driver.findElement(BOMCostSummary).getText();
				Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");
				}
				
				String BOMCommLabel=driver.findElement(BOMComments).getText();
				Assert.assertEquals(BOMCommLabel.trim(), "Comments:");

			}
			else if(data[4].equalsIgnoreCase("No")){
				Select select = new Select(driver.findElement(BOMId));
				List<WebElement> options = select.getOptions();
				boolean bVal=CommonFunctions.dropDownOptionVerification(BOMnameReadyforReview,options);
				Assert.assertFalse(bVal);
			}
			else
				log.info("Not applicable(NA)");
		}catch(Exception e){
			fail=true;
			log.error("Exception in readyForReviewReadView()", e);
			return false;
		}
		return true;
	}

	public static boolean readyForReviewUpdate(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();
			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMRFR);
			CommonFunctions.handleAlertPopUp();
			if(data[4].equalsIgnoreCase("Yes")){//Update
				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				//	driver.switchTo().frame("mainFrame");
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");

				//Verification
				//Verification
				if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
					Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable");
				else if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Vendor")||data[2].contains("BOM\\Materials\\Product\\Product\\Vendor"))
				{	System.out.println(driver.findElements(ROname).size());
					Assert.assertEquals(driver.findElements(ROname).size(), 1, "BOM Identification Name is derived");
				}
			//	Assert.assertEquals(driver.findElements(name).size(), 1, "BOM Identification Name is Editable"); 
			//	Assert.assertEquals(driver.findElements(colorway).size(), 1, "General Attributes Colorway is Editable"); 
				//Switch to contentFrame
			//	driver.switchTo().frame("contentframe");
			}
			else if(data[4].equalsIgnoreCase("No")){
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");
			}	
			else
			{
				log.info("For this readyForReviewUpdate is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in readyForReviewUpdate()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : BOMIdentificationReadView:Read_View
	public static boolean verifyBOMIdentificationReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();

			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
			CommonFunctions.handleAlertPopUp();
			if(data[3].contains("BOMIdentificationReadView")&& data[4].equalsIgnoreCase("Yes")){//Read_View
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				if(driver.findElements(BOMIdentification).size() != 0){
					String BILabel=driver.findElement(BOMIdentification).getText();
					Assert.assertEquals(BILabel.trim(), "BOM Identification");
					log.info("BOM IdentificationReadView label is Pass");
				}else{
					log.error("BOMIdentification ReadView label is Fail");
					fail=true;
				}
			}
			else if(data[3].contains("BOMIdentificationReadView")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(BOMIdentification).size() != 0){
					//	log.info("BOMIdentificationReadView label is Present");
					log.error("BOMIdentificationReadView label is Present");
					fail=true;
				}else{
					log.info("BOMIdentificationReadView label is Absent");
				}
			}
			else
			{
				log.info("For this BOMIdentificationReadView is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyBOMIdentificationReadView()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : BOMIdentificationReadView://Update
	public static boolean verifyBOMIdentificationUpdate(String[] data) throws Exception{
		try{
			if(data[4].equalsIgnoreCase("Yes")){//Update
				CreateInWork_BOM(data);
				//	CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				//Select In Work BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMInWork);
				CommonFunctions.handleAlertPopUp();

				//Click on Update button
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				//	driver.switchTo().frame("mainFrame");
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");
				//Verification
				if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Internal")|| (data[2].contains("BOM\\Materials\\Product\\Product\\Internal"))|| (data[2].contains("BOM\\Materials\\Product\\Retail Item\\Soft Goods")))
				{
				BOMname=BOMname+"1";
				driver.findElement(name).clear();
				CommonFunctions.enterTextInTextbox(name, BOMname);
				//Click 'Save and Check In'
				CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
				CommonFunctions.handleAlertPopUp();
				driver.switchTo().frame("contentframe");
				String strBOM=new Select(driver.findElement(BOMId)).getFirstSelectedOption().getText();
				//	strBOM=strBOM.substring(6, 14);
				Assert.assertEquals(strBOM.trim(),BOMname);
				}
				else if(data[2].contains("BOM\\Materials\\Product\\Retail Item\\Vendor")||data[2].contains("BOM\\Materials\\Product\\Product\\Vendor")){
					System.out.println(driver.findElements(ROname).size());
					Assert.assertEquals(driver.findElements(ROname).size(), 1, "BOM Identification Name is derived"); 
				}
			}
			else if(data[4].equalsIgnoreCase("No")){
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this BOMIdentification is not applicable(NA)");
			}
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in verifyBOMIdentificationUpdate()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : General Attributes:Read_View
	public static boolean verifyGeneralAttributesReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();

			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
			CommonFunctions.handleAlertPopUp();
			if(data[3].contains("GeneralAttributesRead_View")&& data[4].equalsIgnoreCase("Yes")){//Read_View
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				if(driver.findElements(Product.labelGeneralAttri).size() != 0){
					String GALabel=driver.findElement(Product.labelGeneralAttri).getText();
					Assert.assertEquals(GALabel, " General Attributes:");
					log.info("General Attributes label is Present");
				}else{
					log.error("General Attributes label is Absent");
					fail=true;
				}
			}
			else if(data[3].contains("GeneralAttributesRead_View")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(Product.labelGeneralAttri).size() != 0){
					System.out.println("General Attirbutes label is Present");
					log.error("General Attirbutes label is Present");
					fail=true;
				}else{
					log.info("General Attirbutes label is Absent");
				}
			}
			else
			{
				log.info("For this General Attributes is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyGeneralAttributesReadView()", e);
			return false;
		}
		return true;
	}
	//Function consist scenario : General Attributes://Update
	public static boolean verifyGeneralAttributesUpdate(String[] data) throws Exception{
		try{
			if(data[4].equalsIgnoreCase("Yes")){//Update
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				//Select In Work BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMInWork);
				CommonFunctions.handleAlertPopUp();

				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				//	driver.switchTo().frame("mainFrame");
				WebDriverWait wait = new WebDriverWait(driver,10);
				wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
				CommonFunctions.clickButtonOrLink(headerAttributesBtn, "btn", "headerAttributesBtn");
				//	BOMname=BOMname+"1";
				//CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, inputValue)
			//	valULCSAfterChange=changeBOMStatus();
				CommonFunctions.selectFromDropDownByVisibleText(wave, "A");
				//Click 'Save and Check In'
				CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
				CommonFunctions.handleAlertPopUp();
				driver.switchTo().frame("contentframe");
				//Click on + sign
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				//Verification
				String strWave=driver.findElement(ROWave).getText();
				Assert.assertEquals(strWave.trim(),"A");
			}
			else if(data[3].contains("GeneralAttributesUpdate")&& data[4].equalsIgnoreCase("No")){
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this General Attributes is not applicable(NA)");
			}
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in verifyGeneralAttributesUpdate()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : BOMCostSummary:Read_View
	public static boolean verifyBOMCostingSummaryReadView(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();

			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
			CommonFunctions.handleAlertPopUp();
			if(data[3].contains("BOMCostingSummaryReadView")&& data[4].equalsIgnoreCase("Yes")){//Read_View
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				if(driver.findElements(BOMCostSummary).size() != 0){
					String BCSLabel=driver.findElement(BOMCostSummary).getText();
					Assert.assertEquals(BCSLabel.trim(), "BOM Cost Summary:");
					log.info("BOMCostingSummaryReadView label is Pass");
				}else{
					log.error("BOMCostingSummaryReadView label is Fail");
					fail=true;
				}
			}
			else if(data[3].contains("BOMCostingSummaryReadView")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(BOMCostSummary).size() != 0){
					System.out.println("BOMCostingSummaryReadView label is Present");
					log.error("BOMCostingSummaryReadView label is Present");
					fail=true;
				}else{
					log.info("BOMCostingSummaryReadView label is Absent");
				}
			}
			else
			{
				log.info("For this BOMCostingSummaryReadView is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyBOMCostingSummaryReadView()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : CostingSummary://Update
	public static boolean verifyBOMCostingSummaryUpdate(String[] data) throws Exception{
		try{
			if(data[4].equalsIgnoreCase("Yes")){//Update
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				//Select In Work BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
				CommonFunctions.handleAlertPopUp();
				//			if(data[4].equalsIgnoreCase("Yes")){//Update
				//				log.info("Need to update excel.CostingSummary is not updatable with any user");
				//				//Need to send mail to liz regarding this.
			}
			else if(data[4].equalsIgnoreCase("No")){
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this BOMCostSummary is not applicable(NA)");
			}
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in verifyBOMCostingSummaryUpdate()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : BOMCommentsRead:Read_View
	public static boolean verifyBOMCommentsRead(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();

			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
			CommonFunctions.handleAlertPopUp();
			if(data[3].contains("BOMCommentsRead")&& data[4].equalsIgnoreCase("Yes")){//Read_View
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				if(driver.findElements(BOMComments).size() != 0){
					String BOMCommLabel=driver.findElement(BOMComments).getText();
					Assert.assertEquals(BOMCommLabel.trim(), "Comments:");
					log.info("BOMComments Read label is Present");
				}else{
					log.error("BOMCommentsRead label is Absent");
					fail=true;
				}
			}
			else if(data[3].contains("BOMCommentsRead")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(BOMComments).size() != 0){
					System.out.println("BOMCommentsRead label is Present");
					log.error("BOMCommentsRead label is Present");
					fail=true;
				}else{
					log.info("BOMCommentsRead label is Absent");
				}
			}
			else
			{
				log.info("For this BOMCommentsRead is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyBOMCommentsRead()", e);
			return false;
		}
		return true;
	}
	//Function consist scenario : BOMComments://Update
	public static boolean verifyBOMCommentsUpdate(String[] data) throws Exception{
		try{
			if(data[4].equalsIgnoreCase("Yes")){//Update
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				//Select In Work BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
				CommonFunctions.handleAlertPopUp();
				//		if(data[4].equalsIgnoreCase("Yes")){//Update
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				//Click on Enter Comment
				CommonFunctions.clickButtonOrLink(EnterComments, "link", "Enter Comment");
				CommonFunctions.enterTextInTextbox(PostNewComment, data[15]);
				CommonFunctions.clickButtonOrLink(post, "btn", "Post Button");
				CommonFunctions.waitForVisibilityOfElement(ROComment);
				String enteredComment = driver.findElement(ROComment).getText();
				Assert.assertEquals(enteredComment, data[15]);
			}
			else if(data[4].equalsIgnoreCase("No")){
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this BOMComments is not applicable(NA)");
			}
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in verifyGeneralAttributesUpdate()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : BOMSectionsRead:Read_View
	public static boolean verifyBOMSectionsRead(String[] data) throws Exception{
		try{
			CommonProjectFunctions.searchProduct(data[5]);
			//Click on Specification
			CommonProjectFunctions.clickSpecificationTab(data[6]);
			CommonProjectFunctions.clickMaterialsTab();

			//Select Source
			CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
			CommonFunctions.handleAlertPopUp();
			//Select Specification
			CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
			CommonFunctions.handleAlertPopUp();
			//Select In Work BOM
			CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
			CommonFunctions.handleAlertPopUp();
			if(data[3].contains("BOMSectionsRead")&& data[4].equalsIgnoreCase("Yes")){//Read_View
				CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
				if(driver.findElements(descHeading).size() != 0){
					String descHeadLabel=driver.findElement(descHeading).getText();
					Assert.assertEquals(descHeadLabel.trim(), "Description");
					log.info("BOMSectionsRead label is Present");
				}else{
					log.error("BOMSectionsRead label is Absent");
					fail=true;
				}
			}
			else if(data[3].contains("BOMSectionsRead")&& data[4].equalsIgnoreCase("No")){
				if(driver.findElements(descHeading).size() != 0){
					System.out.println("BOMSections label is Present");
					log.error("BOMSectionsRead label is Present");
					fail=true;
				}else{
					log.info("BOMSectionsRead label is Absent");
				}
			}
			else
			{
				log.info("For this BOMSectionsRead is not applicable(NA)");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyBOMSectionsRead()", e);
			return false;
		}
		return true;
	}

	//Function consist scenario : BOMSections://Update
	public static boolean verifyBOMSectionsUpdate(String[] data) throws Exception{
		try{
			if(data[4].equalsIgnoreCase("Yes")){//Update
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				//Select In Work BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
				CommonFunctions.handleAlertPopUp();
				//	if(data[4].equalsIgnoreCase("Yes")){//Update
				CommonFunctions.clickButtonOrLink(updateBtn, "btn", "Update btn");
				//Switch to mainframe
				driver.switchTo().frame("mainFrame");
				//Click on Plastic Clear
				CommonFunctions.clickButtonOrLink(plasticClear,"link", "Clear for Plastic");
				//Component or Location
				action = new Actions(driver);
				action.moveToElement(driver.findElement(compOrLoca)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[9]);
				//Meterial Desc
				action.moveToElement(driver.findElement(meterial)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputMaterial, data[16]);
				
				//Click on Chemicals Clear
				CommonFunctions.clickButtonOrLink(chemicalClear,"link", "Clear for Chemicals");
				//Fill Chemical section
				action.moveToElement(driver.findElement(checmicalDesc)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputCompOrLoca, data[17]);
				//Meterial Desc
				action.moveToElement(driver.findElement(meterialRow2)).doubleClick().perform();
				CommonFunctions.enterTextInTextbox(inputMaterial, data[18]);

				//Click 'Save and Check In'
				CommonFunctions.clickButtonOrLink(btnSaveAndCheckIn, "btn", "Save and Check In");
				CommonFunctions.handleAlertPopUp();
				//Switch to contentFrame
				driver.switchTo().frame("contentframe");
				//Select BOM
				CommonFunctions.selectFromDropDownByVisibleText(BOMId, strBOMIW);
				CommonFunctions.handleAlertPopUp();
				
				//Click on 'Click to select a view'
				CommonFunctions.clickButtonOrLink(viewBtn, "img", "View");
				//Click on none
				CommonFunctions.clickButtonOrLink(NoneBtn, "lnk", "--None--");
		
				
				String strplasticDescription=driver.findElement(plasticDescription).getText();
				Assert.assertEquals(strplasticDescription, data[9]);

				String strplasticMeterialDesc=driver.findElement(plasticMeterialDesc).getText();
				Assert.assertEquals(strplasticMeterialDesc, data[16]);

				String strchemicalsDescription=driver.findElement(chemicalsDescription).getText();
				Assert.assertEquals(strchemicalsDescription, data[17]);

				String strchemicalsMeterialDesc=driver.findElement(chemicalsMeterialDesc).getText();
				Assert.assertEquals(strchemicalsMeterialDesc, data[18]);
			}
			else if(data[4].equalsIgnoreCase("No")){
				CommonProjectFunctions.searchProduct(data[5]);
				//Click on Specification
				CommonProjectFunctions.clickSpecificationTab(data[6]);
				CommonProjectFunctions.clickMaterialsTab();

				//Select Source
				CommonFunctions.selectFromDropDownByIndex(selectSource, 1);
				CommonFunctions.handleAlertPopUp();
				//Select Specification
				CommonFunctions.selectFromDropDownByIndex(selectSpecification, 1);
				CommonFunctions.handleAlertPopUp();
				strUpdate = driver.findElement(updateBtn).getAttribute("disabled");
				Assert.assertEquals(strUpdate, "true");

			}	
			else
			{
				log.info("For this General Attributes is not applicable(NA)");
			}
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in verifyGeneralAttributesUpdate()", e);
			return false;
		}
		return true;
	}



	public static Boolean AddSourcingConfiguration(String[] data) throws Exception{
		try{
			SeleniumDriver.driver.switchTo().defaultContent();
			SeleniumDriver.driver.switchTo().frame("contentframe");	
			CommonFunctions.selectFromDropDownByVisibleText(InternalBOMSoftG.actionDD, "Add Sourcing Configuration");

			//Supplier Selection
			CommonFunctions.clickButtonOrLink(SourcingConfig.supplier, "link", "supplier");
			//CommonFunctions.switchToChildWindow();
			Set set = driver.getWindowHandles();
			Iterator iter = set.iterator();
			String parent = (java.lang.String) iter.next();
			String child = (java.lang.String) iter.next();
			driver.switchTo().window(child);
			CommonFunctions.clickButtonOrLink(SourcingConfig.search, "Search For Supplier");
			CommonFunctions.clickButtonOrLink(SourcingConfig.choose, "Supplier selected");
			driver.switchTo().window(parent);

			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");

			//	CommonFunctions.selectFromDropDownByVisibleText(manager, data[23]);
			//Sourcing Lead 
			CommonFunctions.selectFromDropDownByIndex(sourcingLead, 1);
			//*Sourcing Head 
			CommonFunctions.selectFromDropDownByIndex(sourcingHead, 1);
			// Management 
			//	CommonFunctions.selectFromDropDownByVisibleText(management, data[26]);
			//click on Create
			CommonFunctions.clickButtonOrLink(SourcingConfig.CreateSourcebtn, "btn", "Create Source");
		}catch(Exception e){ 
			//fail=true;
			log.error("Exception in AddSourcingConfiguration()", e);
			return false;
		}
		return true;
	}

	public static String Create_Colorway(String[] data) throws Exception{
		try{
			// Select Action DD
			CommonFunctions.selectFromDropDownByVisibleText(InternalBOMSoftG.actionDD, "Create Colorway");
			//Click on Suffix
			CommonFunctions.clickButtonOrLink(Colorway.suffix, "Link", "Suffix Clicked");
			//Switch window
			Set set = SeleniumDriver.driver.getWindowHandles();
			Iterator iter = set.iterator();
			String parent = (java.lang.String) iter.next();
			String child = (java.lang.String) iter.next();
			SeleniumDriver.driver.switchTo().window(child);
			SeleniumDriver.driver.findElement(Colorway.suffixSearch).sendKeys(data[14]);
			CommonFunctions.clickButtonOrLink(Colorway.search, "Link", "Search Clicked");
			CommonFunctions.clickButtonOrLink(Colorway.choose, "Link", "Suffix Selected");
			SeleniumDriver.driver.switchTo().window(parent);
			SeleniumDriver.driver.switchTo().frame("contentframe");
			//	CommonFunctions.enterTextInTextbox(Colorway.languageCode,langCode);
			CommonFunctions.clickButtonOrLink(Colorway.save, "Link", "Colorway Created");
			Thread.sleep(1000);
			Colorway.colorWayName = SeleniumDriver.driver.findElement(Colorway.colorWay).getText();
			//Click on view Product
			CommonFunctions.clickButtonOrLink(Product.viewProductBtn, "Btn", "View Product");
			//CommonFunctions.clickButtonOrLink(ViewProduct, "Link", "Back to product page");
			//check that colorway is created - verification point- use assert always for verification

		}catch(Exception e){
			log.error("Exception in CreateColorway()", e);
		}
		return Colorway.colorWayName;
	}

	//	//This funcion is to select Update Lifecycle State	
	public static String changeBOMStatus() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Released");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeBOMStatus()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusUnderReview() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Under Review");
			}
			//			else if(valULCS.contains("Under Review")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			//			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Under Review");
			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Under Review");
			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Under Review");
			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Under Review");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeBOMStatus()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusReleased() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Released");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "In Work");
			}
			//			else if(valULCS.contains("Released")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Released");
			//			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Released");
			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Released");
			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Released");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeStatusReleased()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusCancelled() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Canceled");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			}
			//			else if(valULCS.contains("Canceled")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			//			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Canceled");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeStatusCancelled()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusRejected() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Rejected");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			}
			//			else if(valULCS.contains("Rejected")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			//			}
			else if(valULCS.contains("Ready For Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Rejected");
			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeStatusRejected()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatusReadyForReview() throws Exception{
		try{
			valULCS = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus,"Ready For Review");
			}
			else if(valULCS.contains("Under Review")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			}
			else if(valULCS.contains("Released")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			}
			else if(valULCS.contains("Canceled")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			}
			else if(valULCS.contains("Rejected")){
				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			}
			//			else if(valULCS.contains("Ready For Review")){
			//				CommonFunctions.selectFromDropDownByVisibleText(BOMStatus, "Ready For Review");
			//			}

			valULCSAfterChange = new Select(driver.findElement(BOMStatus)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){
			fail=true;
			log.error("Exception in changeStatusReadyForReview()", e);
		}
		return valULCSAfterChange;
	}

	public static String changeStatus(String[] data) throws Exception{
		try{
			valULCS = new Select(driver.findElement(Product.Editable_UpdateLifecycleState)).getFirstSelectedOption().getText();
			if(valULCS.contains("In Work")){
				CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState,"Complete");
			}
			else if(valULCS.contains("Complete")){
				CommonFunctions.enterTextInTextbox(Product.Editable_UpdateLifecycleState, "In Work");
			}
			valULCSAfterChange = new Select(driver.findElement(Product.Editable_UpdateLifecycleState)).getFirstSelectedOption().getText();
			System.out.println("valULCS: "+valULCSAfterChange);
		}catch(Exception e){ 
			fail=true;
			log.error("Exception in Season_selectUpdateLifecycleState()", e);
		}
		return valULCSAfterChange;
	}

	@AfterMethod
	public void reporterdataSetResult(){
		if(skip)
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "SKIP");
		else if(fail){
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "FAIL");
			isTestPass=false;
		}
		else
			Utility.dataSetResult(suiteSecurityXls, this.getClass().getSimpleName(), count+2, "PASS");
		skip=false;
		fail=false;
	}
	@BeforeTest
	public void checkTestcaseSkip() throws Exception{

		if(!Utility.isCaseRunnable(suiteSecurityXls, this.getClass().getSimpleName())){
			log.debug("Skipping "+this.getClass().getSimpleName()+" as runmode is set to no");
			throw new SkipException("Skipping "+this.getClass().getSimpleName()+" as runmode is set to no");
		}
		runmodes=Utility.getDataSetRunmodeTest(suiteSecurityXls, this.getClass().getSimpleName());
	}
	@AfterTest
	public void reportTestcaseResult(){
		if(isTestPass){
			Utility.dataSetResult(suiteSecurityXls,"Testcases", Utility.getRowNum(suiteSecurityXls, this.getClass().getSimpleName()),"PASS");
		}else
			Utility.dataSetResult(suiteSecurityXls,"Testcases", Utility.getRowNum(suiteSecurityXls, this.getClass().getSimpleName()),"FAIL");

	}

	@DataProvider
	public Object[][] testDataTest(){
		return Utility.getData(suiteSecurityXls, this.getClass().getSimpleName());
	}

	/*public static boolean SetState_BOM(String[] data) throws Exception{
	try{
		CommonProjectFunctions.searchProduct(data[5]);
		//Click on Specification
		CommonProjectFunctions.clickSpecificationTab(data[6]);
		if(data[3].contains("SetState")&& data[4].equalsIgnoreCase("Yes")){
			//CreateSpecification
			String strSpec= CommonProjectFunctions.Create_Specifications(data[11],data[12]);
			System.out.println("Specification is: "+strSpec);
			CommonProjectFunctions.clickMaterialsTab();
			//If it is in CheckOut state then make it first in Check In state
			//	Boolean bCheckedOut = driver.findElement(checkedOutByYou).isDisplayed();
			if(driver.findElements(checkedOutByYou).size()>0){
				CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
				//Check In
				driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'Check In')]")).click();
			}
			CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
			driver.findElement(By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font/table/tbody//a[contains(text(),'"+data[13] +"')]")).click();

			String valULCSAfterChange=BOM_selectUpdateLifecycleState(data);
			Thread.sleep(1000);
			//Click on Update
			CommonFunctions.clickButtonOrLink(Product.linkUpdate, "link", "Update");
			//Expand
			CommonFunctions.clickButtonOrLink(headerAttributesPlus, "btn","Expand Collapse button");
			//verification
			strRO_UpdateLifecycleState = driver.findElement(RO_UpdateLifecycleState).getText();
			System.out.println("strRO_UpdateLifecycleState: "+strRO_UpdateLifecycleState);
			Assert.assertEquals(strRO_UpdateLifecycleState, valULCSAfterChange);
		}
		else if(data[3].contains("SetState")&& data[4].equalsIgnoreCase("No")){
			CommonProjectFunctions.clickMaterialsTab();
			CommonFunctions.clickButtonOrLink(BOMAction, "btn", "Action dropdown");
			System.out.println(driver.findElements(setState).size());
			Assert.assertEquals(driver.findElements(setState).size(),0);
		}
		else
			log.info("SetState or chageState is not applicable(NA)");
	}catch(Exception e){ 
		fail=true;
		log.error("Exception in SetState_BOM()", e);
		return false;
	}
	return true;
}*/

}
